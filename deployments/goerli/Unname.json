{
  "address": "0x77E4c192b6ab081584aBB7d71E795663587f7324",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ADDRESS_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NORMAL_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SPECIAL_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_CARD_CONDITION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressHasClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressHasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionPriceStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStepNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionTimeStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "claimSpecial",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimStageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDutchAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveawayNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAuctionStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasClaimStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idHasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintNormal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "normalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quantityLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnStarted",
          "type": "bool"
        }
      ],
      "name": "setBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionTimeStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionPriceStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStepNumber",
          "type": "uint256"
        }
      ],
      "name": "setDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX",
          "type": "uint256"
        }
      ],
      "name": "setIdLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_hasClaimStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_hasAuctionStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_whitelistSwitch",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_saleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setSaleSwitch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimStageLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStageLimit",
          "type": "uint256"
        }
      ],
      "name": "setStageLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_NORMAL_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX_SPECIAL_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SPECIAL_CARD_CONDITION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX_ADDRESS_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialCardId",
          "type": "uint256"
        }
      ],
      "name": "setTokenLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialCardId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06edec98560d7df602358f38793c2bf9118c11da267ca016dd54d25888db489d",
  "receipt": {
    "to": null,
    "from": "0xCf3eD5Eb7850c885AbD6F0170c1fA66ef7c758fF",
    "contractAddress": "0x77E4c192b6ab081584aBB7d71E795663587f7324",
    "transactionIndex": 53,
    "gasUsed": "4574587",
    "logsBloom": "0x
    "blockHash": "0xd62077918ff85b3f6ce31cbafc1cefc39e03a31408339ac335e05012b1827ae4",
    "transactionHash": "0x06edec98560d7df602358f38793c2bf9118c11da267ca016dd54d25888db489d",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 8035330,
        "transactionHash": "0x06edec98560d7df602358f38793c2bf9118c11da267ca016dd54d25888db489d",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x86d03f430c7616021073d7a71766f632f1ce19f289aa989534d9f4732253eb59",
          "0x00000000000000000000000077e4c192b6ab081584abb7d71e795663587f7324",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0xd62077918ff85b3f6ce31cbafc1cefc39e03a31408339ac335e05012b1827ae4"
      },
      {
        "transactionIndex": 53,
        "blockNumber": 8035330,
        "transactionHash": "0x06edec98560d7df602358f38793c2bf9118c11da267ca016dd54d25888db489d",
        "address": "0x000000000000AAeB6D7670E522A718067333cd4E",
        "topics": [
          "0x0038c54977604f1a5c0a3604cbbecd0153c81e3131799ead95755e8bb5d5b9e8",
          "0x00000000000000000000000077e4c192b6ab081584abb7d71e795663587f7324",
          "0x0000000000000000000000003cc6cdda760b79bafa08df41ecfa224f810dceb6",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xd62077918ff85b3f6ce31cbafc1cefc39e03a31408339ac335e05012b1827ae4"
      }
    ],
    "blockNumber": 8035330,
    "cumulativeGasUsed": "9963882",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cdba1b5866dbb1cf02bbbfe13f182601",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ADDRESS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NORMAL_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPECIAL_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_CARD_CONDITION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStepNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionTimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"claimSpecial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDutchAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveawayNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAuctionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaimStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idHasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintNormal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnStarted\",\"type\":\"bool\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionTimeStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionPriceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStepNumber\",\"type\":\"uint256\"}],\"name\":\"setDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX\",\"type\":\"uint256\"}],\"name\":\"setIdLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasClaimStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasAuctionStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_whitelistSwitch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_saleTimestamp\",\"type\":\"uint256\"}],\"name\":\"setSaleSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStageLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStageLimit\",\"type\":\"uint256\"}],\"name\":\"setStageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_NORMAL_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_SPECIAL_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SPECIAL_CARD_CONDITION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_ADDRESS_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialCardId\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Unname.sol\":\"Unname\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\",\"keccak256\":\"0xea30c402170bc240354b74e6c6f6a8e5bdb1935d90d168cc58c0654461c6a72b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Unname.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\n\\ncontract Unname is EIP712, ERC1155, DefaultOperatorFilterer{\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Variables\\n\\t// ------------------------------------------------------------------------\\n\\t// string private _name = \\\"PlateForm by Unname Token\\\";\\n\\tstring private _name = \\\"P\\\";\\n\\tstring private _symbol = \\\"PFUT\\\"; // \\n\\t\\n\\tuint256 public MAX_NORMAL_TOKEN = 2200;\\n\\tuint256 public MAX_SPECIAL_TOKEN = 22;\\n\\tuint256 public SPECIAL_CARD_CONDITION = 3; // \\n\\tuint256 public MAX_ADDRESS_TOKEN = 10; //\\n\\tuint256 public PRICE = 0.2 ether; //\\n\\tuint256 public saleTimestamp = 1642410000; //\\n\\tuint256 public normalSupply = 0;\\n\\tuint256 public specialSupply = 0;\\n\\tuint256 public claimStageLimit = 30;\\n\\tuint256 public auctionStageLimit = 2200;\\n\\tuint256 public specialCardId = 21; \\n\\t\\n\\tbool public hasSaleStarted = false; \\n\\tbool public hasClaimStarted = false; \\n\\tbool public hasAuctionStarted = false; \\n\\tbool public whitelistSwitch = false;\\n\\tbool public burnStarted = false;\\n\\n\\taddress public owner = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\taddress public treasury = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\taddress public signer = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\n    // Dutch auction config\\n    uint256 public auctionStartTimestamp; \\n    uint256 public auctionTimeStep;\\n    uint256 public auctionStartPrice;\\n    uint256 public auctionEndPrice;\\n    uint256 public auctionPriceStep;\\n    uint256 public auctionStepNumber;\\n\\n\\tmapping (uint256 => uint256) public quantityLimit;\\n\\tmapping (uint256 => uint256) public idHasMinted;\\n\\tmapping (address => uint256) public addressHasMinted;\\n\\tmapping (address => uint256) public addressHasClaimed;\\n\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()\\n\\tERC1155(\\\"http://api.unnametoken.com/Metadata/{id}\\\")\\n\\tEIP712(\\\"Unname\\\", \\\"1.0.0\\\")\\n\\t{\\n\\t\\tfor (uint index = 1; index < 21; index++){\\n\\t\\t\\tquantityLimit[index] = 110;\\n\\t\\t}\\n\\n\\t\\tfor (uint index = 21; index < 43; index++){\\n\\t\\t\\tquantityLimit[index] = 1;\\n\\t\\t}\\n\\t} \\n\\t\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 id, uint256 quantity, uint256 totalSupply);\\n\\n\\t// Modifiers\\n\\t// ------------------------------------------------------------------------\\n\\tfunction _onlyOwner() private view {\\n\\t\\trequire(msg.sender == owner, \\\"You are not owner.\\\");\\n\\t}\\n\\n    modifier onlyOwner() {\\n\\t\\t_onlyOwner();\\n        _;\\n    }\\n\\n    modifier onlySale() {\\n\\t\\trequire(hasSaleStarted == true, \\\"SALE_NOT_ACTIVE\\\");\\n        require(block.timestamp >= saleTimestamp, \\\"NOT_IN_SALE_TIME\\\");\\n        _;\\n    }\\n\\n    modifier callerIsUser() {\\n        require(tx.origin == msg.sender, \\\"CALLER_IS_CONTRACT\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn signer == recoveredAddr;\\n\\t}\\n\\n\\t// Random functions\\n\\t// ------------------------------------------------------------------------\\n    function random(string memory seed) private pure returns (uint) {\\n        uint randomHash = uint(keccak256(abi.encode(seed)));\\n\\n        return randomHash % 20;\\n    } \\n\\n\\t// Auction functions\\n\\t// ------------------------------------------------------------------------\\n    function getDutchAuctionPrice() public view returns (uint256) {\\n        require(hasAuctionStarted == true, \\\"AUCTION_NOT_ACTIVE\\\");\\n\\n        if (block.timestamp < auctionStartTimestamp) {\\n            return auctionStartPrice;\\n        } else {\\n            // calculate step\\n            uint256 step = (block.timestamp - auctionStartTimestamp) / auctionTimeStep;\\n            if (step > auctionStepNumber) {\\n                step = auctionStepNumber;\\n            }\\n\\n            // claculate final price\\n            if (auctionStartPrice > step * auctionPriceStep){\\n                return auctionStartPrice - step * auctionPriceStep;\\n            } else {\\n                return auctionEndPrice;\\n            }\\n        }\\n    }\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveawayNFT(address to, uint256 id, uint256 quantity) external onlyOwner{\\n\\t\\trequire(quantity > 0 && idHasMinted[id].add(quantity) <= quantityLimit[id], \\\"Exceeds id quantity limit.\\\");\\n\\n\\t\\t_mint(to, id, quantity, \\\"\\\");\\n\\n\\t\\tif (id > 20) {\\n\\t\\t\\tspecialSupply = specialSupply.add(quantity);\\n\\t\\t} else {\\n\\t\\t\\tnormalSupply = normalSupply.add(quantity);\\n\\t\\t}\\n\\t\\tidHasMinted[id] = idHasMinted[id].add(quantity);\\n\\n\\t\\temit mintEvent(to, id, quantity, totalSupply());\\n\\t}\\n\\n\\t// Claim special card functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction claimSpecial(uint256 maxQuantity, bytes memory SIGNATURE) external payable{\\n\\t\\trequire(hasClaimStarted == true, \\\"Claim has not started.\\\");\\n\\t\\trequire(block.timestamp >= saleTimestamp, \\\"NOT_IN_CLAIM_TIME\\\");\\n\\t\\trequire(specialCardId <= claimStageLimit, \\\"Exceed the special id of claim at this stage.\\\");\\n\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for claim.\\\");\\n\\t\\t\\n\\t\\tuint256 tokenNum = 0;\\n\\t\\tfor (uint index = 1; index < 21; index++){\\n\\t\\t\\tif (balanceOf(msg.sender, index) != 0){\\n\\t\\t\\t\\ttokenNum = tokenNum + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(tokenNum >= SPECIAL_CARD_CONDITION, \\\"Not enough normal card.\\\");\\n\\t\\trequire(msg.value >= PRICE, \\\"Ether value sent is not equal to the price.\\\");\\n\\t\\trequire(specialSupply.add(1) <= MAX_SPECIAL_TOKEN, \\\"Exceeds MAX_SPECIAL_TOKEN.\\\");\\n\\t\\trequire(idHasMinted[specialCardId].add(1) <= quantityLimit[specialCardId], \\\"Exceeds id quantity limit.\\\");\\n\\t\\trequire(addressHasClaimed[msg.sender].add(1) <= maxQuantity, \\\"Exceeds claim quantity.\\\");\\n\\n\\t\\tidHasMinted[specialCardId] = idHasMinted[specialCardId].add(1);\\n\\t\\taddressHasClaimed[msg.sender] = addressHasClaimed[msg.sender].add(1);\\n\\t\\t\\n\\t\\t_mint(msg.sender, specialCardId, 1, \\\"\\\");\\n\\n\\t\\tspecialSupply = specialSupply.add(1);\\n\\t\\temit mintEvent(msg.sender, specialCardId, 1, totalSupply());\\n\\t\\tspecialCardId = specialCardId + 1; \\n\\t}\\n\\n\\t// Mint normal card functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintNormal(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlySale callerIsUser{\\n\\t\\tif (whitelistSwitch == true) {\\n\\t\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\t\\tMAX_ADDRESS_TOKEN = maxQuantity;\\n\\t\\t}\\n\\t\\tif (hasAuctionStarted == true) {\\n\\t\\t\\trequire(msg.value >= getDutchAuctionPrice().mul(quantity), \\\"Ether value sent is not enough.\\\");\\n\\t\\t\\trequire(quantity > 0 && normalSupply.add(quantity) <= auctionStageLimit, \\\"Exceeds MAX_NORMAL_TOKEN.\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(msg.value >= PRICE.mul(quantity), \\\"Ether value sent is not equal to the price.\\\");\\n\\t\\t}\\n\\t\\trequire(quantity > 0 && normalSupply.add(quantity) <= MAX_NORMAL_TOKEN, \\\"Exceeds MAX_NORMAL_TOKEN.\\\");\\n\\t\\trequire(addressHasMinted[msg.sender].add(quantity) <= MAX_ADDRESS_TOKEN, \\\"Exceeds quantity.\\\");\\n\\n\\t\\tuint256 randomNum;\\n\\t\\tuint256 tokenId;\\n\\t\\taddressHasMinted[msg.sender] = addressHasMinted[msg.sender].add(quantity);\\n\\t\\t\\n        for (uint index = 0; index < quantity; index++) {\\n            string memory seed = string(abi.encodePacked(msg.sender, index, block.timestamp));\\n            randomNum = random(seed);\\n\\t\\t\\ttokenId = randomNum + 1;\\n\\n\\t\\t\\twhile(idHasMinted[tokenId].add(1) > quantityLimit[tokenId]) {\\n\\t\\t\\t\\ttokenId = tokenId + 1;\\n\\t\\t\\t\\tif (tokenId > 20) {\\n\\t\\t\\t\\t\\ttokenId = 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\n\\t\\t\\tidHasMinted[tokenId] = idHasMinted[tokenId].add(1);\\n\\n\\t\\t\\t_mint(msg.sender, tokenId, 1, \\\"\\\");\\n\\n\\t\\t\\tnormalSupply = normalSupply.add(1);\\n\\t\\t\\temit mintEvent(msg.sender, tokenId, 1, totalSupply());\\n        }\\n\\t}\\n\\n\\t// Burn functions\\n\\t// ------------------------------------------------------------------------\\n    function burn(address account, uint256 id, uint256 quantity) public virtual {\\n        require(burnStarted == true, \\\"Burn hasn't started.\\\");\\n        require(account == tx.origin || isApprovedForAll(account, _msgSender()), \\\"Caller is not owner nor approved.\\\");\\n\\n        _burn(account, id, quantity);\\n    }\\n\\n\\t// TotalSupply functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn normalSupply + specialSupply;\\n\\t}\\n\\n\\n\\t// Setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setTokenLimit(uint256 _MAX_NORMAL_TOKEN, uint256 _MAX_SPECIAL_TOKEN, uint256 _SPECIAL_CARD_CONDITION, uint256 _MAX_ADDRESS_TOKEN, uint256 _specialCardId) external onlyOwner {\\n\\t\\tMAX_NORMAL_TOKEN = _MAX_NORMAL_TOKEN;\\n\\t\\tMAX_SPECIAL_TOKEN = _MAX_SPECIAL_TOKEN;\\n\\t\\tSPECIAL_CARD_CONDITION = _SPECIAL_CARD_CONDITION;\\n\\t\\tMAX_ADDRESS_TOKEN = _MAX_ADDRESS_TOKEN;\\n\\t\\tspecialCardId = _specialCardId;\\n\\t}\\n\\n\\tfunction setIdLimit(uint256 _id, uint256 _MAX) external onlyOwner {\\n\\t\\tquantityLimit[_id] = _MAX;\\n\\t}\\n\\n\\tfunction setPRICE(uint256 _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n\\tfunction setStageLimit(uint _claimStageLimit, uint _auctionStageLimit) external onlyOwner {\\n\\t\\tclaimStageLimit = _claimStageLimit;\\n\\t\\tauctionStageLimit = _auctionStageLimit;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory baseURI) public onlyOwner {\\n\\t\\t_setURI(baseURI);\\n\\t}\\n\\n\\tfunction setOwner(address _owner) public onlyOwner {\\n\\t\\towner = _owner;\\n\\t}\\n\\n    function setBurn(bool _burnStarted) external onlyOwner {\\n        burnStarted = _burnStarted;\\n    }\\n\\t\\n    function setSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        signer = _signer;\\n    }\\n\\n    function setSaleSwitch(\\n\\t\\tbool _hasSaleStarted, \\n\\t\\tbool _hasClaimStarted, \\n\\t\\tbool _hasAuctionStarted, \\n\\t\\tbool _whitelistSwitch, \\n\\t\\tuint256 _saleTimestamp\\n\\t) external onlyOwner {\\n        hasSaleStarted = _hasSaleStarted;\\n\\t\\thasClaimStarted = _hasClaimStarted;\\n\\t\\thasAuctionStarted = _hasAuctionStarted;\\n\\t\\twhitelistSwitch = _whitelistSwitch;\\n        saleTimestamp = _saleTimestamp;\\n    }\\n\\n    function setDutchAuction(\\n        uint256 _auctionStartTimestamp, \\n        uint256 _auctionTimeStep, \\n        uint256 _auctionStartPrice, \\n        uint256 _auctionEndPrice, \\n        uint256 _auctionPriceStep, \\n        uint256 _auctionStepNumber\\n    ) external onlyOwner {\\n        auctionStartTimestamp = _auctionStartTimestamp;\\n        auctionTimeStep = _auctionTimeStep;\\n        auctionStartPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionPriceStep = _auctionPriceStep;\\n        auctionStepNumber = _auctionStepNumber;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n\\n    function setApprovalForAll(\\n\\t\\taddress operator, \\n\\t\\tbool approved\\n\\t) \\n\\t\\tpublic \\n\\t\\toverride \\n\\t\\tonlyAllowedOperatorApproval(operator) \\n\\t{\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n\\t\\taddress from, \\n\\t\\taddress to, \\n\\t\\tuint256 tokenId, \\n\\t\\tuint256 amount, \\n\\t\\tbytes memory data\\n\\t)\\n        public\\n        override\\n        onlyAllowedOperator(from)\\n    {\\n        super.safeTransferFrom(from, to, tokenId, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) \\n\\t\\tpublic \\n\\t\\tvirtual \\n\\t\\toverride \\n\\t\\tonlyAllowedOperator(from) \\n\\t{\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa8616eb28b236c00a5a6a7ca1daac081d3794cef749f411b59d3a83ccc26af52\",\"license\":\"MIT\"},\"operator-filter-registry/src/DefaultOperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\",\"keccak256\":\"0x1d6616260cb0fa3a3c56c9db3c29b1db6037d0f30049dca5e94b4896999df991\",\"license\":\"MIT\"},\"operator-filter-registry/src/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0e6751a391939afcda79fde27c10b2b27c21041b5b9c81db28233fcdc1a2f9ba\",\"license\":\"MIT\"},\"operator-filter-registry/src/OperatorFilterer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcdf355575d1bd6730eab09060a2fbb2d59f2c9b92de8383d35960ecc1bfc0db3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040526001610140819052600560fc1b61016090815262000027916003919062000405565b50604080518082019091526004808252631411955560e21b602090920191825262000053918162000405565b50610898600581905560166006556003600755600a60088190556702c68af0bb1400006009556361e5301090556000600b819055600c55601e600d55600e556015600f55601080546001600160c81b031916785279246e3626cebe71a4c181382a50a71d2a4156000000000017905560118054735279246e3626cebe71a4c181382a50a71d2a41566001600160a01b031991821681179092556012805490911690911790553480156200010557600080fd5b50733cc6cdda760b79bafa08df41ecfa224f810dceb6600160405180606001604052806028815260200162003d82602891396040805180820182526006815265556e6e616d6560d01b6020808301918252835180850190945260058452640312e302e360dc1b908401528151902060e08190527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c6101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620002178184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525062000233925083915050620003ec565b506daaeb6d7670e522a718067333cd4e3b1562000379578015620002c757604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b158015620002a857600080fd5b505af1158015620002bd573d6000803e3d6000fd5b5050505062000379565b6001600160a01b03821615620003185760405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af2903906044016200028d565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b1580156200035f57600080fd5b505af115801562000374573d6000803e3d6000fd5b505050505b50600190505b6015811015620003b0576000818152601960205260409020606e905580620003a781620004ab565b9150506200037f565b5060155b602b811015620003e55760008181526019602052604090206001905580620003dc81620004ab565b915050620003b4565b506200050f565b80516200040190600290602084019062000405565b5050565b8280546200041390620004d3565b90600052602060002090601f01602090048101928262000437576000855562000482565b82601f106200045257805160ff191683800117855562000482565b8280016001018555821562000482579182015b828111156200048257825182559160200191906001019062000465565b506200049092915062000494565b5090565b5b8082111562000490576000815560010162000495565b600060018201620004cc57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680620004e857607f821691505b6020821081036200050957634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e05161010051610120516138236200055f600039600061260c0152600061265b015260006126360152600061258f015260006125b9015260006125e301526138236000f3fe60806040526004361061038b5760003560e01c806385852ce4116101dc578063c6a96c8f11610102578063e7e43465116100a0578063f242432a1161006f578063f242432a14610a2b578063f5298aca14610a4b578063f5bb134e14610a6b578063fbf76eb214610a8157600080fd5b8063e7e4346514610982578063e985e9c5146109a2578063eea52d38146109eb578063f0f4426014610a0b57600080fd5b8063d756985b116100dc578063d756985b14610913578063d7eef86514610929578063dcb8101f1461093f578063e2e771a41461096c57600080fd5b8063c6a96c8f146108d1578063c7822598146108e7578063cca8a0d8146108fd57600080fd5b8063a04a6ac81161017a578063bcd25ee511610149578063bcd25ee514610867578063bd55cf0d14610888578063c44f81e2146108a8578063c4f9ff10146108be57600080fd5b8063a04a6ac8146107ee578063a22cb46514610804578063a5b5665c14610824578063b2a098d91461083a57600080fd5b80638da5cb5b116101b65780638da5cb5b146107845780639196eba5146107ad57806395d89b41146107c3578063964dd240146107d857600080fd5b806385852ce414610738578063862a2b45146107585780638d859f3e1461076e57600080fd5b80632e1de27f116102c15780634b30a9101161025f57806361d027b31161022e57806361d027b3146106d15780636c19e783146106f1578063717bf33614610711578063853828b61461073057600080fd5b80634b30a910146106425780634ca4fb34146106575780634e1273f41461068457806355f804b3146106b157600080fd5b806341f434341161029b57806341f43434146105c757806344944f31146105e95780634698a3d81461061657806348b5f2bc1461062c57600080fd5b80632e1de27f146105745780632eb2c2d6146105875780634017b12f146105a757600080fd5b806318160ddd1161032e578063238ac93311610308578063238ac933146104dc57806326df66ce14610514578063271cb22f146105345780632db218b61461055457600080fd5b806318160ddd1461048d57806319cb4a1c146104a25780631c8b232d146104c257600080fd5b80630af012dd1161036a5780630af012dd146104155780630b07e4d1146104375780630e89341c1461044d57806313af40351461046d57600080fd5b8062fdd58e1461039057806301ffc9a7146103c357806306fdde03146103f3575b600080fd5b34801561039c57600080fd5b506103b06103ab366004612c6d565b610aa3565b6040519081526020015b60405180910390f35b3480156103cf57600080fd5b506103e36103de366004612cad565b610b39565b60405190151581526020016103ba565b3480156103ff57600080fd5b50610408610b8b565b6040516103ba9190612d17565b34801561042157600080fd5b50610435610430366004612d2a565b610c1d565b005b34801561044357600080fd5b506103b060055481565b34801561045957600080fd5b50610408610468366004612d4c565b610c30565b34801561047957600080fd5b50610435610488366004612d65565b610cc4565b34801561049957600080fd5b506103b0610cfc565b3480156104ae57600080fd5b506104356104bd366004612d80565b610d13565b3480156104ce57600080fd5b506010546103e39060ff1681565b3480156104e857600080fd5b506012546104fc906001600160a01b031681565b6040516001600160a01b0390911681526020016103ba565b34801561052057600080fd5b506010546103e39062010000900460ff1681565b34801561054057600080fd5b5061043561054f366004612d2a565b610d32565b34801561056057600080fd5b5061043561056f366004612dc9565b610d4c565b610435610582366004612eee565b610da8565b34801561059357600080fd5b506104356105a2366004612fca565b6111e1565b3480156105b357600080fd5b506104356105c2366004613074565b611210565b3480156105d357600080fd5b506104fc6daaeb6d7670e522a718067333cd4e81565b3480156105f557600080fd5b506103b0610604366004612d65565b601c6020526000908152604090205481565b34801561062257600080fd5b506103b060175481565b34801561063857600080fd5b506103b0600b5481565b34801561064e57600080fd5b506103b0611352565b34801561066357600080fd5b506103b0610672366004612d4c565b601a6020526000908152604090205481565b34801561069057600080fd5b506106a461069f3660046130a7565b611429565b6040516103ba91906131a3565b3480156106bd57600080fd5b506104356106cc3660046131b6565b611553565b3480156106dd57600080fd5b506011546104fc906001600160a01b031681565b3480156106fd57600080fd5b5061043561070c366004612d65565b611567565b34801561071d57600080fd5b506010546103e390610100900460ff1681565b6104356115de565b34801561074457600080fd5b506103e3610753366004612eee565b611619565b34801561076457600080fd5b506103b060085481565b34801561077a57600080fd5b506103b060095481565b34801561079057600080fd5b506010546104fc906501000000000090046001600160a01b031681565b3480156107b957600080fd5b506103b060145481565b3480156107cf57600080fd5b506104086116a3565b3480156107e457600080fd5b506103b060185481565b3480156107fa57600080fd5b506103b060165481565b34801561081057600080fd5b5061043561081f366004613207565b6116b2565b34801561083057600080fd5b506103b0600c5481565b34801561084657600080fd5b506103b0610855366004612d65565b601b6020526000908152604090205481565b34801561087357600080fd5b506010546103e3906301000000900460ff1681565b34801561089457600080fd5b506104356108a336600461323e565b6116cb565b3480156108b457600080fd5b506103b0600d5481565b6104356108cc36600461325b565b6116f3565b3480156108dd57600080fd5b506103b060135481565b3480156108f357600080fd5b506103b0600a5481565b34801561090957600080fd5b506103b060075481565b34801561091f57600080fd5b506103b060155481565b34801561093557600080fd5b506103b0600e5481565b34801561094b57600080fd5b506103b061095a366004612d4c565b60196020526000908152604090205481565b34801561097857600080fd5b506103b0600f5481565b34801561098e57600080fd5b5061043561099d3660046132ab565b611b9b565b3480156109ae57600080fd5b506103e36109bd3660046132ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156109f757600080fd5b50610435610a06366004612d4c565b611bc0565b348015610a1757600080fd5b50610435610a26366004612d65565b611bcd565b348015610a3757600080fd5b50610435610a46366004613321565b611bf7565b348015610a5757600080fd5b50610435610a66366004613074565b611c1e565b348015610a7757600080fd5b506103b060065481565b348015610a8d57600080fd5b506010546103e390640100000000900460ff1681565b60006001600160a01b038316610b135760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b1480610b6a57506001600160e01b031982166303a24d0760e21b145b80610b8557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060038054610b9a90613386565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc690613386565b8015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b5050505050905090565b610c25611cf1565b600d91909155600e55565b606060028054610c3f90613386565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6b90613386565b8015610cb85780601f10610c8d57610100808354040283529160200191610cb8565b820191906000526020600020905b815481529060010190602001808311610c9b57829003601f168201915b50505050509050919050565b610ccc611cf1565b601080546001600160a01b03909216650100000000000265010000000000600160c81b0319909216919091179055565b6000600c54600b54610d0e91906133d6565b905090565b610d1b611cf1565b600594909455600692909255600755600855600f55565b610d3a611cf1565b60009182526019602052604090912055565b610d54611cf1565b6010805492151563010000000263ff0000001994151562010000029490941663ffff0000199515156101000261ff00199715159790971661ffff199094169390931795909517939093161717909155600a55565b60105460ff610100909104161515600114610dfe5760405162461bcd60e51b815260206004820152601660248201527521b630b4b6903430b9903737ba1039ba30b93a32b21760511b6044820152606401610b0a565b600a54421015610e445760405162461bcd60e51b81526020600482015260116024820152704e4f545f494e5f434c41494d5f54494d4560781b6044820152606401610b0a565b600d54600f541115610eae5760405162461bcd60e51b815260206004820152602d60248201527f45786365656420746865207370656369616c206964206f6620636c61696d206160448201526c3a103a3434b99039ba30b3b29760991b6064820152608401610b0a565b610eb88282611619565b610f045760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656c696769626c6520666f7220636c61696d2e0000000000000000006044820152606401610b0a565b600060015b6015811015610f4157610f1c3382610aa3565b15610f2f57610f2c8260016133d6565b91505b80610f39816133ee565b915050610f09565b50600754811015610f945760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768206e6f726d616c20636172642e0000000000000000006044820152606401610b0a565b600954341015610fb65760405162461bcd60e51b8152600401610b0a90613407565b600654600c54610fc7906001611d49565b11156110155760405162461bcd60e51b815260206004820152601a60248201527f45786365656473204d41585f5350454349414c5f544f4b454e2e0000000000006044820152606401610b0a565b600f54600090815260196020908152604080832054601a9092529091205461103e906001611d49565b111561108c5760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610b0a565b336000908152601c602052604090205483906110a9906001611d49565b11156110f75760405162461bcd60e51b815260206004820152601760248201527f4578636565647320636c61696d207175616e746974792e0000000000000000006044820152606401610b0a565b600f546000908152601a6020526040902054611114906001611d49565b600f546000908152601a6020908152604080832093909355338252601c90522054611140906001611d49565b336000818152601c6020908152604080832094909455600f5484519182019094529081526111719290600190611d5c565b600c5461117f906001611d49565b600c55600f547fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86490339060016111b3610cfc565b6040516111c39493929190613452565b60405180910390a1600f546111d99060016133d6565b600f55505050565b846001600160a01b03811633146111fb576111fb33611e70565b6112088686868686611f29565b505050505050565b611218611cf1565b60008111801561124b5750600082815260196020908152604080832054601a909252909120546112489083611d49565b11155b6112975760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610b0a565b6112b283838360405180602001604052806000815250611d5c565b60148211156112d057600c546112c89082611d49565b600c556112e1565b600b546112dd9082611d49565b600b555b6000828152601a60205260409020546112fa9082611d49565b6000838152601a60205260409020557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c864838383611335610cfc565b6040516113459493929190613452565b60405180910390a1505050565b60105460009062010000900460ff1615156001146113a75760405162461bcd60e51b815260206004820152601260248201527141554354494f4e5f4e4f545f41435449564560701b6044820152606401610b0a565b6013544210156113b8575060155490565b6000601454601354426113cb9190613478565b6113d591906134a5565b90506018548111156113e657506018545b6017546113f390826134b9565b601554111561141c5760175461140990826134b9565b6015546114169190613478565b91505090565b505060165490565b505b90565b6060815183511461148e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610b0a565b6000835167ffffffffffffffff8111156114aa576114aa612e2d565b6040519080825280602002602001820160405280156114d3578160200160208202803683370190505b50905060005b845181101561154b5761151e8582815181106114f7576114f76134d8565b6020026020010151858381518110611511576115116134d8565b6020026020010151610aa3565b828281518110611530576115306134d8565b6020908102919091010152611544816133ee565b90506114d9565b509392505050565b61155b611cf1565b61156481611f75565b50565b61156f611cf1565b6001600160a01b0381166115bc5760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610b0a565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6115e6611cf1565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061161757600080fd5b565b60008061168a6116847f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611f8c565b84611fda565b6012546001600160a01b03918216911614949350505050565b606060048054610b9a90613386565b816116bc81611e70565b6116c68383611ff6565b505050565b6116d3611cf1565b601080549115156401000000000264ff0000000019909216919091179055565b60105460ff16151560011461173c5760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b6044820152606401610b0a565b600a544210156117815760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b6044820152606401610b0a565b3233146117c55760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b6044820152606401610b0a565b6010546301000000900460ff161515600103611837576117e58282611619565b6118315760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610b0a565b60088290555b60105462010000900460ff1615156001036119185761185e83611858611352565b90612001565b3410156118ad5760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420656e6f7567682e006044820152606401610b0a565b6000831180156118cb5750600e54600b546118c89085611d49565b11155b6119135760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610b0a565b611944565b6009546119259084612001565b3410156119445760405162461bcd60e51b8152600401610b0a90613407565b6000831180156119625750600554600b5461195f9085611d49565b11155b6119aa5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610b0a565b600854336000908152601b60205260409020546119c79085611d49565b1115611a095760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399038bab0b73a34ba3c9760791b6044820152606401610b0a565b336000908152601b60205260408120548190611a259086611d49565b336000908152601b60205260408120919091555b85811015611208576040516bffffffffffffffffffffffff193360601b166020820152603481018290524260548201526000906074016040516020818303038152906040529050611a898161200d565b9350611a968460016133d6565b92505b600083815260196020908152604080832054601a90925290912054611abf906001611d49565b1115611ae557611ad08360016133d6565b92506014831115611ae057600192505b611a99565b6000838152601a6020526040902054611aff906001611d49565b601a600085815260200190815260200160002081905550611b323384600160405180602001604052806000815250611d5c565b600b54611b40906001611d49565b600b557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86433846001611b70610cfc565b604051611b809493929190613452565b60405180910390a15080611b93816133ee565b915050611a39565b611ba3611cf1565b601395909555601493909355601591909155601655601755601855565b611bc8611cf1565b600955565b611bd5611cf1565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b846001600160a01b0381163314611c1157611c1133611e70565b6112088686868686612046565b601054640100000000900460ff161515600114611c745760405162461bcd60e51b8152602060048201526014602482015273213ab937103430b9b713ba1039ba30b93a32b21760611b6044820152606401610b0a565b6001600160a01b038316321480611c905750611c9083336109bd565b611ce65760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152601760f91b6064820152608401610b0a565b6116c683838361208b565b6010546501000000000090046001600160a01b031633146116175760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b6044820152606401610b0a565b6000611d5582846133d6565b9392505050565b6001600160a01b038416611dbc5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b0a565b336000611dc885612207565b90506000611dd585612207565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611e079084906133d6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e6783600089898989612252565b50505050505050565b6daaeb6d7670e522a718067333cd4e3b1561156457604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0191906134ee565b61156457604051633b79c77360e21b81526001600160a01b0382166004820152602401610b0a565b6001600160a01b038516331480611f455750611f4585336109bd565b611f615760405162461bcd60e51b8152600401610b0a9061350b565b611f6e85858585856123ad565b5050505050565b8051611f88906002906020840190612bc1565b5050565b6000610b85611f99612582565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611fe985856126a9565b9150915061154b816126ee565b611f88338383612838565b6000611d5582846134b9565b600080826040516020016120219190612d17565b60408051601f1981840301815291905280516020909101209050611d55601482613559565b6001600160a01b038516331480612062575061206285336109bd565b61207e5760405162461bcd60e51b8152600401610b0a9061350b565b611f6e8585858585612918565b6001600160a01b0383166120ed5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610b0a565b3360006120f984612207565b9050600061210684612207565b60408051602080820183526000918290528882528181528282206001600160a01b038b168352905220549091508481101561218f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610b0a565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611e67565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612241576122416134d8565b602090810291909101015292915050565b6001600160a01b0384163b156112085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612296908990899088908890889060040161356d565b6020604051808303816000875af19250505080156122d1575060408051601f3d908101601f191682019092526122ce918101906135b2565b60015b61237d576122dd6135cf565b806308c379a00361231657506122f16135ea565b806122fc5750612318565b8060405162461bcd60e51b8152600401610b0a9190612d17565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610b0a565b6001600160e01b0319811663f23a6e6160e01b14611e675760405162461bcd60e51b8152600401610b0a90613674565b815183511461240f5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b0a565b6001600160a01b0384166124355760405162461bcd60e51b8152600401610b0a906136bc565b3360005b845181101561251c576000858281518110612456576124566134d8565b602002602001015190506000858381518110612474576124746134d8565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156124c45760405162461bcd60e51b8152600401610b0a90613701565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906125019084906133d6565b9250508190555050505080612515906133ee565b9050612439565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161256c92919061374b565b60405180910390a4611208818787878787612a42565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156125db57507f000000000000000000000000000000000000000000000000000000000000000046145b1561260557507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036126df5760208301516040840151606085015160001a6126d387828585612afd565b945094505050506126e7565b506000905060025b9250929050565b600081600481111561270257612702613779565b0361270a5750565b600181600481111561271e5761271e613779565b0361276b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b0a565b600281600481111561277f5761277f613779565b036127cc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b0a565b60038160048111156127e0576127e0613779565b036115645760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b0a565b816001600160a01b0316836001600160a01b0316036128ab5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610b0a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661293e5760405162461bcd60e51b8152600401610b0a906136bc565b33600061294a85612207565b9050600061295785612207565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561299a5760405162461bcd60e51b8152600401610b0a90613701565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906129d79084906133d6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612a37848a8a8a8a8a612252565b505050505050505050565b6001600160a01b0384163b156112085760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a86908990899088908890889060040161378f565b6020604051808303816000875af1925050508015612ac1575060408051601f3d908101601f19168201909252612abe918101906135b2565b60015b612acd576122dd6135cf565b6001600160e01b0319811663bc197c8160e01b14611e675760405162461bcd60e51b8152600401610b0a90613674565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b345750600090506003612bb8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b88573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bb157600060019250925050612bb8565b9150600090505b94509492505050565b828054612bcd90613386565b90600052602060002090601f016020900481019282612bef5760008555612c35565b82601f10612c0857805160ff1916838001178555612c35565b82800160010185558215612c35579182015b82811115612c35578251825591602001919060010190612c1a565b506114249291505b808211156114245760008155600101612c3d565b80356001600160a01b0381168114612c6857600080fd5b919050565b60008060408385031215612c8057600080fd5b612c8983612c51565b946020939093013593505050565b6001600160e01b03198116811461156457600080fd5b600060208284031215612cbf57600080fd5b8135611d5581612c97565b6000815180845260005b81811015612cf057602081850181015186830182015201612cd4565b81811115612d02576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d556020830184612cca565b60008060408385031215612d3d57600080fd5b50508035926020909101359150565b600060208284031215612d5e57600080fd5b5035919050565b600060208284031215612d7757600080fd5b611d5582612c51565b600080600080600060a08688031215612d9857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b801515811461156457600080fd5b600080600080600060a08688031215612de157600080fd5b8535612dec81612dbb565b94506020860135612dfc81612dbb565b93506040860135612e0c81612dbb565b92506060860135612e1c81612dbb565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612e6957612e69612e2d565b6040525050565b600067ffffffffffffffff831115612e8a57612e8a612e2d565b604051612ea1601f8501601f191660200182612e43565b809150838152848484011115612eb657600080fd5b83836020830137600060208583010152509392505050565b600082601f830112612edf57600080fd5b611d5583833560208501612e70565b60008060408385031215612f0157600080fd5b82359150602083013567ffffffffffffffff811115612f1f57600080fd5b612f2b85828601612ece565b9150509250929050565b600067ffffffffffffffff821115612f4f57612f4f612e2d565b5060051b60200190565b600082601f830112612f6a57600080fd5b81356020612f7782612f35565b604051612f848282612e43565b83815260059390931b8501820192828101915086841115612fa457600080fd5b8286015b84811015612fbf5780358352918301918301612fa8565b509695505050505050565b600080600080600060a08688031215612fe257600080fd5b612feb86612c51565b9450612ff960208701612c51565b9350604086013567ffffffffffffffff8082111561301657600080fd5b61302289838a01612f59565b9450606088013591508082111561303857600080fd5b61304489838a01612f59565b9350608088013591508082111561305a57600080fd5b5061306788828901612ece565b9150509295509295909350565b60008060006060848603121561308957600080fd5b61309284612c51565b95602085013595506040909401359392505050565b600080604083850312156130ba57600080fd5b823567ffffffffffffffff808211156130d257600080fd5b818501915085601f8301126130e657600080fd5b813560206130f382612f35565b6040516131008282612e43565b83815260059390931b850182019282810191508984111561312057600080fd5b948201945b838610156131455761313686612c51565b82529482019490820190613125565b9650508601359250508082111561315b57600080fd5b50612f2b85828601612f59565b600081518084526020808501945080840160005b838110156131985781518752958201959082019060010161317c565b509495945050505050565b602081526000611d556020830184613168565b6000602082840312156131c857600080fd5b813567ffffffffffffffff8111156131df57600080fd5b8201601f810184136131f057600080fd5b6131ff84823560208401612e70565b949350505050565b6000806040838503121561321a57600080fd5b61322383612c51565b9150602083013561323381612dbb565b809150509250929050565b60006020828403121561325057600080fd5b8135611d5581612dbb565b60008060006060848603121561327057600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561329557600080fd5b6132a186828701612ece565b9150509250925092565b60008060008060008060c087890312156132c457600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806040838503121561330157600080fd5b61330a83612c51565b915061331860208401612c51565b90509250929050565b600080600080600060a0868803121561333957600080fd5b61334286612c51565b945061335060208701612c51565b93506040860135925060608601359150608086013567ffffffffffffffff81111561337a57600080fd5b61306788828901612ece565b600181811c9082168061339a57607f821691505b6020821081036133ba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156133e9576133e96133c0565b500190565b600060018201613400576134006133c0565b5060010190565b6020808252602b908201527f45746865722076616c75652073656e74206973206e6f7420657175616c20746f60408201526a103a343290383934b1b29760a91b606082015260800190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008282101561348a5761348a6133c0565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826134b4576134b461348f565b500490565b60008160001904831182151516156134d3576134d36133c0565b500290565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561350057600080fd5b8151611d5581612dbb565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000826135685761356861348f565b500690565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135a790830184612cca565b979650505050505050565b6000602082840312156135c457600080fd5b8151611d5581612c97565b600060033d11156114265760046000803e5060005160e01c90565b600060443d10156135f85790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561362857505050505090565b82850191508151818111156136405750505050505090565b843d870101602082850101111561365a5750505050505090565b61366960208286010187612e43565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061375e6040830185613168565b82810360208401526137708185613168565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0386811682528516602082015260a0604082018190526000906137bb90830186613168565b82810360608401526137cd8186613168565b905082810360808401526137e18185612cca565b9897505050505050505056fea2646970667358221220eed5a81681871ab2ac1529b40cd9bce0741af3bcb21999bc3b968a73874f168e64736f6c634300080d0033687474703a2f2f6170692e756e6e616d65746f6b656e2e636f6d2f4d657461646174612f7b69647d",
  "deployedBytecode": "0x60806040526004361061038b5760003560e01c806385852ce4116101dc578063c6a96c8f11610102578063e7e43465116100a0578063f242432a1161006f578063f242432a14610a2b578063f5298aca14610a4b578063f5bb134e14610a6b578063fbf76eb214610a8157600080fd5b8063e7e4346514610982578063e985e9c5146109a2578063eea52d38146109eb578063f0f4426014610a0b57600080fd5b8063d756985b116100dc578063d756985b14610913578063d7eef86514610929578063dcb8101f1461093f578063e2e771a41461096c57600080fd5b8063c6a96c8f146108d1578063c7822598146108e7578063cca8a0d8146108fd57600080fd5b8063a04a6ac81161017a578063bcd25ee511610149578063bcd25ee514610867578063bd55cf0d14610888578063c44f81e2146108a8578063c4f9ff10146108be57600080fd5b8063a04a6ac8146107ee578063a22cb46514610804578063a5b5665c14610824578063b2a098d91461083a57600080fd5b80638da5cb5b116101b65780638da5cb5b146107845780639196eba5146107ad57806395d89b41146107c3578063964dd240146107d857600080fd5b806385852ce414610738578063862a2b45146107585780638d859f3e1461076e57600080fd5b80632e1de27f116102c15780634b30a9101161025f57806361d027b31161022e57806361d027b3146106d15780636c19e783146106f1578063717bf33614610711578063853828b61461073057600080fd5b80634b30a910146106425780634ca4fb34146106575780634e1273f41461068457806355f804b3146106b157600080fd5b806341f434341161029b57806341f43434146105c757806344944f31146105e95780634698a3d81461061657806348b5f2bc1461062c57600080fd5b80632e1de27f146105745780632eb2c2d6146105875780634017b12f146105a757600080fd5b806318160ddd1161032e578063238ac93311610308578063238ac933146104dc57806326df66ce14610514578063271cb22f146105345780632db218b61461055457600080fd5b806318160ddd1461048d57806319cb4a1c146104a25780631c8b232d146104c257600080fd5b80630af012dd1161036a5780630af012dd146104155780630b07e4d1146104375780630e89341c1461044d57806313af40351461046d57600080fd5b8062fdd58e1461039057806301ffc9a7146103c357806306fdde03146103f3575b600080fd5b34801561039c57600080fd5b506103b06103ab366004612c6d565b610aa3565b6040519081526020015b60405180910390f35b3480156103cf57600080fd5b506103e36103de366004612cad565b610b39565b60405190151581526020016103ba565b3480156103ff57600080fd5b50610408610b8b565b6040516103ba9190612d17565b34801561042157600080fd5b50610435610430366004612d2a565b610c1d565b005b34801561044357600080fd5b506103b060055481565b34801561045957600080fd5b50610408610468366004612d4c565b610c30565b34801561047957600080fd5b50610435610488366004612d65565b610cc4565b34801561049957600080fd5b506103b0610cfc565b3480156104ae57600080fd5b506104356104bd366004612d80565b610d13565b3480156104ce57600080fd5b506010546103e39060ff1681565b3480156104e857600080fd5b506012546104fc906001600160a01b031681565b6040516001600160a01b0390911681526020016103ba565b34801561052057600080fd5b506010546103e39062010000900460ff1681565b34801561054057600080fd5b5061043561054f366004612d2a565b610d32565b34801561056057600080fd5b5061043561056f366004612dc9565b610d4c565b610435610582366004612eee565b610da8565b34801561059357600080fd5b506104356105a2366004612fca565b6111e1565b3480156105b357600080fd5b506104356105c2366004613074565b611210565b3480156105d357600080fd5b506104fc6daaeb6d7670e522a718067333cd4e81565b3480156105f557600080fd5b506103b0610604366004612d65565b601c6020526000908152604090205481565b34801561062257600080fd5b506103b060175481565b34801561063857600080fd5b506103b0600b5481565b34801561064e57600080fd5b506103b0611352565b34801561066357600080fd5b506103b0610672366004612d4c565b601a6020526000908152604090205481565b34801561069057600080fd5b506106a461069f3660046130a7565b611429565b6040516103ba91906131a3565b3480156106bd57600080fd5b506104356106cc3660046131b6565b611553565b3480156106dd57600080fd5b506011546104fc906001600160a01b031681565b3480156106fd57600080fd5b5061043561070c366004612d65565b611567565b34801561071d57600080fd5b506010546103e390610100900460ff1681565b6104356115de565b34801561074457600080fd5b506103e3610753366004612eee565b611619565b34801561076457600080fd5b506103b060085481565b34801561077a57600080fd5b506103b060095481565b34801561079057600080fd5b506010546104fc906501000000000090046001600160a01b031681565b3480156107b957600080fd5b506103b060145481565b3480156107cf57600080fd5b506104086116a3565b3480156107e457600080fd5b506103b060185481565b3480156107fa57600080fd5b506103b060165481565b34801561081057600080fd5b5061043561081f366004613207565b6116b2565b34801561083057600080fd5b506103b0600c5481565b34801561084657600080fd5b506103b0610855366004612d65565b601b6020526000908152604090205481565b34801561087357600080fd5b506010546103e3906301000000900460ff1681565b34801561089457600080fd5b506104356108a336600461323e565b6116cb565b3480156108b457600080fd5b506103b0600d5481565b6104356108cc36600461325b565b6116f3565b3480156108dd57600080fd5b506103b060135481565b3480156108f357600080fd5b506103b0600a5481565b34801561090957600080fd5b506103b060075481565b34801561091f57600080fd5b506103b060155481565b34801561093557600080fd5b506103b0600e5481565b34801561094b57600080fd5b506103b061095a366004612d4c565b60196020526000908152604090205481565b34801561097857600080fd5b506103b0600f5481565b34801561098e57600080fd5b5061043561099d3660046132ab565b611b9b565b3480156109ae57600080fd5b506103e36109bd3660046132ee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156109f757600080fd5b50610435610a06366004612d4c565b611bc0565b348015610a1757600080fd5b50610435610a26366004612d65565b611bcd565b348015610a3757600080fd5b50610435610a46366004613321565b611bf7565b348015610a5757600080fd5b50610435610a66366004613074565b611c1e565b348015610a7757600080fd5b506103b060065481565b348015610a8d57600080fd5b506010546103e390640100000000900460ff1681565b60006001600160a01b038316610b135760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b1480610b6a57506001600160e01b031982166303a24d0760e21b145b80610b8557506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060038054610b9a90613386565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc690613386565b8015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b5050505050905090565b610c25611cf1565b600d91909155600e55565b606060028054610c3f90613386565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6b90613386565b8015610cb85780601f10610c8d57610100808354040283529160200191610cb8565b820191906000526020600020905b815481529060010190602001808311610c9b57829003601f168201915b50505050509050919050565b610ccc611cf1565b601080546001600160a01b03909216650100000000000265010000000000600160c81b0319909216919091179055565b6000600c54600b54610d0e91906133d6565b905090565b610d1b611cf1565b600594909455600692909255600755600855600f55565b610d3a611cf1565b60009182526019602052604090912055565b610d54611cf1565b6010805492151563010000000263ff0000001994151562010000029490941663ffff0000199515156101000261ff00199715159790971661ffff199094169390931795909517939093161717909155600a55565b60105460ff610100909104161515600114610dfe5760405162461bcd60e51b815260206004820152601660248201527521b630b4b6903430b9903737ba1039ba30b93a32b21760511b6044820152606401610b0a565b600a54421015610e445760405162461bcd60e51b81526020600482015260116024820152704e4f545f494e5f434c41494d5f54494d4560781b6044820152606401610b0a565b600d54600f541115610eae5760405162461bcd60e51b815260206004820152602d60248201527f45786365656420746865207370656369616c206964206f6620636c61696d206160448201526c3a103a3434b99039ba30b3b29760991b6064820152608401610b0a565b610eb88282611619565b610f045760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656c696769626c6520666f7220636c61696d2e0000000000000000006044820152606401610b0a565b600060015b6015811015610f4157610f1c3382610aa3565b15610f2f57610f2c8260016133d6565b91505b80610f39816133ee565b915050610f09565b50600754811015610f945760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768206e6f726d616c20636172642e0000000000000000006044820152606401610b0a565b600954341015610fb65760405162461bcd60e51b8152600401610b0a90613407565b600654600c54610fc7906001611d49565b11156110155760405162461bcd60e51b815260206004820152601a60248201527f45786365656473204d41585f5350454349414c5f544f4b454e2e0000000000006044820152606401610b0a565b600f54600090815260196020908152604080832054601a9092529091205461103e906001611d49565b111561108c5760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610b0a565b336000908152601c602052604090205483906110a9906001611d49565b11156110f75760405162461bcd60e51b815260206004820152601760248201527f4578636565647320636c61696d207175616e746974792e0000000000000000006044820152606401610b0a565b600f546000908152601a6020526040902054611114906001611d49565b600f546000908152601a6020908152604080832093909355338252601c90522054611140906001611d49565b336000818152601c6020908152604080832094909455600f5484519182019094529081526111719290600190611d5c565b600c5461117f906001611d49565b600c55600f547fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86490339060016111b3610cfc565b6040516111c39493929190613452565b60405180910390a1600f546111d99060016133d6565b600f55505050565b846001600160a01b03811633146111fb576111fb33611e70565b6112088686868686611f29565b505050505050565b611218611cf1565b60008111801561124b5750600082815260196020908152604080832054601a909252909120546112489083611d49565b11155b6112975760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610b0a565b6112b283838360405180602001604052806000815250611d5c565b60148211156112d057600c546112c89082611d49565b600c556112e1565b600b546112dd9082611d49565b600b555b6000828152601a60205260409020546112fa9082611d49565b6000838152601a60205260409020557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c864838383611335610cfc565b6040516113459493929190613452565b60405180910390a1505050565b60105460009062010000900460ff1615156001146113a75760405162461bcd60e51b815260206004820152601260248201527141554354494f4e5f4e4f545f41435449564560701b6044820152606401610b0a565b6013544210156113b8575060155490565b6000601454601354426113cb9190613478565b6113d591906134a5565b90506018548111156113e657506018545b6017546113f390826134b9565b601554111561141c5760175461140990826134b9565b6015546114169190613478565b91505090565b505060165490565b505b90565b6060815183511461148e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610b0a565b6000835167ffffffffffffffff8111156114aa576114aa612e2d565b6040519080825280602002602001820160405280156114d3578160200160208202803683370190505b50905060005b845181101561154b5761151e8582815181106114f7576114f76134d8565b6020026020010151858381518110611511576115116134d8565b6020026020010151610aa3565b828281518110611530576115306134d8565b6020908102919091010152611544816133ee565b90506114d9565b509392505050565b61155b611cf1565b61156481611f75565b50565b61156f611cf1565b6001600160a01b0381166115bc5760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610b0a565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6115e6611cf1565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061161757600080fd5b565b60008061168a6116847f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611f8c565b84611fda565b6012546001600160a01b03918216911614949350505050565b606060048054610b9a90613386565b816116bc81611e70565b6116c68383611ff6565b505050565b6116d3611cf1565b601080549115156401000000000264ff0000000019909216919091179055565b60105460ff16151560011461173c5760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b6044820152606401610b0a565b600a544210156117815760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b6044820152606401610b0a565b3233146117c55760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b6044820152606401610b0a565b6010546301000000900460ff161515600103611837576117e58282611619565b6118315760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610b0a565b60088290555b60105462010000900460ff1615156001036119185761185e83611858611352565b90612001565b3410156118ad5760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420656e6f7567682e006044820152606401610b0a565b6000831180156118cb5750600e54600b546118c89085611d49565b11155b6119135760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610b0a565b611944565b6009546119259084612001565b3410156119445760405162461bcd60e51b8152600401610b0a90613407565b6000831180156119625750600554600b5461195f9085611d49565b11155b6119aa5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610b0a565b600854336000908152601b60205260409020546119c79085611d49565b1115611a095760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399038bab0b73a34ba3c9760791b6044820152606401610b0a565b336000908152601b60205260408120548190611a259086611d49565b336000908152601b60205260408120919091555b85811015611208576040516bffffffffffffffffffffffff193360601b166020820152603481018290524260548201526000906074016040516020818303038152906040529050611a898161200d565b9350611a968460016133d6565b92505b600083815260196020908152604080832054601a90925290912054611abf906001611d49565b1115611ae557611ad08360016133d6565b92506014831115611ae057600192505b611a99565b6000838152601a6020526040902054611aff906001611d49565b601a600085815260200190815260200160002081905550611b323384600160405180602001604052806000815250611d5c565b600b54611b40906001611d49565b600b557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86433846001611b70610cfc565b604051611b809493929190613452565b60405180910390a15080611b93816133ee565b915050611a39565b611ba3611cf1565b601395909555601493909355601591909155601655601755601855565b611bc8611cf1565b600955565b611bd5611cf1565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b846001600160a01b0381163314611c1157611c1133611e70565b6112088686868686612046565b601054640100000000900460ff161515600114611c745760405162461bcd60e51b8152602060048201526014602482015273213ab937103430b9b713ba1039ba30b93a32b21760611b6044820152606401610b0a565b6001600160a01b038316321480611c905750611c9083336109bd565b611ce65760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152601760f91b6064820152608401610b0a565b6116c683838361208b565b6010546501000000000090046001600160a01b031633146116175760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b6044820152606401610b0a565b6000611d5582846133d6565b9392505050565b6001600160a01b038416611dbc5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610b0a565b336000611dc885612207565b90506000611dd585612207565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611e079084906133d6565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e6783600089898989612252565b50505050505050565b6daaeb6d7670e522a718067333cd4e3b1561156457604051633185c44d60e21b81523060048201526001600160a01b03821660248201526daaeb6d7670e522a718067333cd4e9063c617113490604401602060405180830381865afa158015611edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0191906134ee565b61156457604051633b79c77360e21b81526001600160a01b0382166004820152602401610b0a565b6001600160a01b038516331480611f455750611f4585336109bd565b611f615760405162461bcd60e51b8152600401610b0a9061350b565b611f6e85858585856123ad565b5050505050565b8051611f88906002906020840190612bc1565b5050565b6000610b85611f99612582565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611fe985856126a9565b9150915061154b816126ee565b611f88338383612838565b6000611d5582846134b9565b600080826040516020016120219190612d17565b60408051601f1981840301815291905280516020909101209050611d55601482613559565b6001600160a01b038516331480612062575061206285336109bd565b61207e5760405162461bcd60e51b8152600401610b0a9061350b565b611f6e8585858585612918565b6001600160a01b0383166120ed5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610b0a565b3360006120f984612207565b9050600061210684612207565b60408051602080820183526000918290528882528181528282206001600160a01b038b168352905220549091508481101561218f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610b0a565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611e67565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612241576122416134d8565b602090810291909101015292915050565b6001600160a01b0384163b156112085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612296908990899088908890889060040161356d565b6020604051808303816000875af19250505080156122d1575060408051601f3d908101601f191682019092526122ce918101906135b2565b60015b61237d576122dd6135cf565b806308c379a00361231657506122f16135ea565b806122fc5750612318565b8060405162461bcd60e51b8152600401610b0a9190612d17565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610b0a565b6001600160e01b0319811663f23a6e6160e01b14611e675760405162461bcd60e51b8152600401610b0a90613674565b815183511461240f5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610b0a565b6001600160a01b0384166124355760405162461bcd60e51b8152600401610b0a906136bc565b3360005b845181101561251c576000858281518110612456576124566134d8565b602002602001015190506000858381518110612474576124746134d8565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156124c45760405162461bcd60e51b8152600401610b0a90613701565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906125019084906133d6565b9250508190555050505080612515906133ee565b9050612439565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161256c92919061374b565b60405180910390a4611208818787878787612a42565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156125db57507f000000000000000000000000000000000000000000000000000000000000000046145b1561260557507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036126df5760208301516040840151606085015160001a6126d387828585612afd565b945094505050506126e7565b506000905060025b9250929050565b600081600481111561270257612702613779565b0361270a5750565b600181600481111561271e5761271e613779565b0361276b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b0a565b600281600481111561277f5761277f613779565b036127cc5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b0a565b60038160048111156127e0576127e0613779565b036115645760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b0a565b816001600160a01b0316836001600160a01b0316036128ab5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610b0a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841661293e5760405162461bcd60e51b8152600401610b0a906136bc565b33600061294a85612207565b9050600061295785612207565b90506000868152602081815260408083206001600160a01b038c1684529091529020548581101561299a5760405162461bcd60e51b8152600401610b0a90613701565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906129d79084906133d6565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612a37848a8a8a8a8a612252565b505050505050505050565b6001600160a01b0384163b156112085760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612a86908990899088908890889060040161378f565b6020604051808303816000875af1925050508015612ac1575060408051601f3d908101601f19168201909252612abe918101906135b2565b60015b612acd576122dd6135cf565b6001600160e01b0319811663bc197c8160e01b14611e675760405162461bcd60e51b8152600401610b0a90613674565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b345750600090506003612bb8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b88573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612bb157600060019250925050612bb8565b9150600090505b94509492505050565b828054612bcd90613386565b90600052602060002090601f016020900481019282612bef5760008555612c35565b82601f10612c0857805160ff1916838001178555612c35565b82800160010185558215612c35579182015b82811115612c35578251825591602001919060010190612c1a565b506114249291505b808211156114245760008155600101612c3d565b80356001600160a01b0381168114612c6857600080fd5b919050565b60008060408385031215612c8057600080fd5b612c8983612c51565b946020939093013593505050565b6001600160e01b03198116811461156457600080fd5b600060208284031215612cbf57600080fd5b8135611d5581612c97565b6000815180845260005b81811015612cf057602081850181015186830182015201612cd4565b81811115612d02576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611d556020830184612cca565b60008060408385031215612d3d57600080fd5b50508035926020909101359150565b600060208284031215612d5e57600080fd5b5035919050565b600060208284031215612d7757600080fd5b611d5582612c51565b600080600080600060a08688031215612d9857600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b801515811461156457600080fd5b600080600080600060a08688031215612de157600080fd5b8535612dec81612dbb565b94506020860135612dfc81612dbb565b93506040860135612e0c81612dbb565b92506060860135612e1c81612dbb565b949793965091946080013592915050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715612e6957612e69612e2d565b6040525050565b600067ffffffffffffffff831115612e8a57612e8a612e2d565b604051612ea1601f8501601f191660200182612e43565b809150838152848484011115612eb657600080fd5b83836020830137600060208583010152509392505050565b600082601f830112612edf57600080fd5b611d5583833560208501612e70565b60008060408385031215612f0157600080fd5b82359150602083013567ffffffffffffffff811115612f1f57600080fd5b612f2b85828601612ece565b9150509250929050565b600067ffffffffffffffff821115612f4f57612f4f612e2d565b5060051b60200190565b600082601f830112612f6a57600080fd5b81356020612f7782612f35565b604051612f848282612e43565b83815260059390931b8501820192828101915086841115612fa457600080fd5b8286015b84811015612fbf5780358352918301918301612fa8565b509695505050505050565b600080600080600060a08688031215612fe257600080fd5b612feb86612c51565b9450612ff960208701612c51565b9350604086013567ffffffffffffffff8082111561301657600080fd5b61302289838a01612f59565b9450606088013591508082111561303857600080fd5b61304489838a01612f59565b9350608088013591508082111561305a57600080fd5b5061306788828901612ece565b9150509295509295909350565b60008060006060848603121561308957600080fd5b61309284612c51565b95602085013595506040909401359392505050565b600080604083850312156130ba57600080fd5b823567ffffffffffffffff808211156130d257600080fd5b818501915085601f8301126130e657600080fd5b813560206130f382612f35565b6040516131008282612e43565b83815260059390931b850182019282810191508984111561312057600080fd5b948201945b838610156131455761313686612c51565b82529482019490820190613125565b9650508601359250508082111561315b57600080fd5b50612f2b85828601612f59565b600081518084526020808501945080840160005b838110156131985781518752958201959082019060010161317c565b509495945050505050565b602081526000611d556020830184613168565b6000602082840312156131c857600080fd5b813567ffffffffffffffff8111156131df57600080fd5b8201601f810184136131f057600080fd5b6131ff84823560208401612e70565b949350505050565b6000806040838503121561321a57600080fd5b61322383612c51565b9150602083013561323381612dbb565b809150509250929050565b60006020828403121561325057600080fd5b8135611d5581612dbb565b60008060006060848603121561327057600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561329557600080fd5b6132a186828701612ece565b9150509250925092565b60008060008060008060c087890312156132c457600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806040838503121561330157600080fd5b61330a83612c51565b915061331860208401612c51565b90509250929050565b600080600080600060a0868803121561333957600080fd5b61334286612c51565b945061335060208701612c51565b93506040860135925060608601359150608086013567ffffffffffffffff81111561337a57600080fd5b61306788828901612ece565b600181811c9082168061339a57607f821691505b6020821081036133ba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156133e9576133e96133c0565b500190565b600060018201613400576134006133c0565b5060010190565b6020808252602b908201527f45746865722076616c75652073656e74206973206e6f7420657175616c20746f60408201526a103a343290383934b1b29760a91b606082015260800190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60008282101561348a5761348a6133c0565b500390565b634e487b7160e01b600052601260045260246000fd5b6000826134b4576134b461348f565b500490565b60008160001904831182151516156134d3576134d36133c0565b500290565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561350057600080fd5b8151611d5581612dbb565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b6000826135685761356861348f565b500690565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906135a790830184612cca565b979650505050505050565b6000602082840312156135c457600080fd5b8151611d5581612c97565b600060033d11156114265760046000803e5060005160e01c90565b600060443d10156135f85790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561362857505050505090565b82850191508151818111156136405750505050505090565b843d870101602082850101111561365a5750505050505090565b61366960208286010187612e43565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60408152600061375e6040830185613168565b82810360208401526137708185613168565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0386811682528516602082015260a0604082018190526000906137bb90830186613168565b82810360608401526137cd8186613168565b905082810360808401526137e18185612cca565b9897505050505050505056fea2646970667358221220eed5a81681871ab2ac1529b40cd9bce0741af3bcb21999bc3b968a73874f168e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3681,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3684,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3687,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_NORMAL_TOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3690,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_SPECIAL_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3693,
        "contract": "contracts/Unname.sol:Unname",
        "label": "SPECIAL_CARD_CONDITION",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3696,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_ADDRESS_TOKEN",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3699,
        "contract": "contracts/Unname.sol:Unname",
        "label": "PRICE",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3702,
        "contract": "contracts/Unname.sol:Unname",
        "label": "saleTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3705,
        "contract": "contracts/Unname.sol:Unname",
        "label": "normalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3708,
        "contract": "contracts/Unname.sol:Unname",
        "label": "specialSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3711,
        "contract": "contracts/Unname.sol:Unname",
        "label": "claimStageLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3714,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStageLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3717,
        "contract": "contracts/Unname.sol:Unname",
        "label": "specialCardId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3720,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3723,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasClaimStarted",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3726,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasAuctionStarted",
        "offset": 2,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3729,
        "contract": "contracts/Unname.sol:Unname",
        "label": "whitelistSwitch",
        "offset": 3,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3732,
        "contract": "contracts/Unname.sol:Unname",
        "label": "burnStarted",
        "offset": 4,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3735,
        "contract": "contracts/Unname.sol:Unname",
        "label": "owner",
        "offset": 5,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3738,
        "contract": "contracts/Unname.sol:Unname",
        "label": "treasury",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3741,
        "contract": "contracts/Unname.sol:Unname",
        "label": "signer",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 3743,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStartTimestamp",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3745,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionTimeStep",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3747,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3749,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3751,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionPriceStep",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 3753,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStepNumber",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 3757,
        "contract": "contracts/Unname.sol:Unname",
        "label": "quantityLimit",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3761,
        "contract": "contracts/Unname.sol:Unname",
        "label": "idHasMinted",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3765,
        "contract": "contracts/Unname.sol:Unname",
        "label": "addressHasMinted",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3769,
        "contract": "contracts/Unname.sol:Unname",
        "label": "addressHasClaimed",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}