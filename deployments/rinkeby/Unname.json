{
  "address": "0x7296334165fC627d9Ed0D432d590b1475c2f3f2F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ADDRESS_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_NORMAL_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SPECIAL_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPECIAL_CARD_CONDITION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressHasClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressHasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionEndPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionPriceStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionStepNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionTimeStep",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "claimSpecial",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimStageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDutchAuctionPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveawayNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAuctionStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasClaimStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idHasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintNormal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "normalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quantityLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnStarted",
          "type": "bool"
        }
      ],
      "name": "setBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_auctionStartTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionTimeStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStartPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionEndPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionPriceStep",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStepNumber",
          "type": "uint256"
        }
      ],
      "name": "setDutchAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX",
          "type": "uint256"
        }
      ],
      "name": "setIdLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_hasClaimStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_hasAuctionStarted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_whitelistSwitch",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_saleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setSaleSwitch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimStageLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_auctionStageLimit",
          "type": "uint256"
        }
      ],
      "name": "setStageLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_NORMAL_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX_SPECIAL_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_SPECIAL_CARD_CONDITION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX_ADDRESS_TOKEN",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_specialCardId",
          "type": "uint256"
        }
      ],
      "name": "setTokenLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialCardId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "specialSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x003cec27c8cb895ef18c0c9331636a68be538b0356a122c1e284569244f43423",
  "receipt": {
    "to": null,
    "from": "0x5279246E3626Cebe71a4c181382A50a71d2A4156",
    "contractAddress": "0x7296334165fC627d9Ed0D432d590b1475c2f3f2F",
    "transactionIndex": 7,
    "gasUsed": "4479852",
    "logsBloom": "0x
    "blockHash": "0x86ee5dae6ae6f2fe7d713ca70de5bdc429bda28256218fcc1ba454b34c76509a",
    "transactionHash": "0x003cec27c8cb895ef18c0c9331636a68be538b0356a122c1e284569244f43423",
    "logs": [],
    "blockNumber": 10544039,
    "cumulativeGasUsed": "7324413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "9dc89844f49bd5bfb4a73fcb770799b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ADDRESS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NORMAL_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SPECIAL_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_CARD_CONDITION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressHasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionPriceStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStepNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionTimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"claimSpecial\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDutchAuctionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveawayNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAuctionStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasClaimStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idHasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintNormal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quantityLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnStarted\",\"type\":\"bool\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionTimeStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStartPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionEndPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionPriceStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStepNumber\",\"type\":\"uint256\"}],\"name\":\"setDutchAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX\",\"type\":\"uint256\"}],\"name\":\"setIdLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasClaimStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_hasAuctionStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_whitelistSwitch\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_saleTimestamp\",\"type\":\"uint256\"}],\"name\":\"setSaleSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStageLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_auctionStageLimit\",\"type\":\"uint256\"}],\"name\":\"setStageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_NORMAL_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_SPECIAL_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_SPECIAL_CARD_CONDITION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_ADDRESS_TOKEN\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialCardId\",\"type\":\"uint256\"}],\"name\":\"setTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialCardId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"specialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Unname.sol\":\"Unname\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Unname.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract Unname is EIP712, ERC1155{\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Variables\\n\\t// ------------------------------------------------------------------------\\n\\t// string private _name = \\\"PlateForm by Unname Token\\\";\\n\\tstring private _name = \\\"P\\\";\\n\\tstring private _symbol = \\\"PFUT\\\"; // \\n\\t\\n\\tuint256 public MAX_NORMAL_TOKEN = 2200;\\n\\tuint256 public MAX_SPECIAL_TOKEN = 22;\\n\\tuint256 public SPECIAL_CARD_CONDITION = 3; // \\n\\tuint256 public MAX_ADDRESS_TOKEN = 10; //\\n\\tuint256 public PRICE = 0.2 ether; //\\n\\tuint256 public saleTimestamp = 1642410000; //\\n\\tuint256 public normalSupply = 0;\\n\\tuint256 public specialSupply = 0;\\n\\tuint256 public claimStageLimit = 30;\\n\\tuint256 public auctionStageLimit = 2200;\\n\\tuint256 public specialCardId = 21; \\n\\t\\n\\tbool public hasSaleStarted = false; \\n\\tbool public hasClaimStarted = false; \\n\\tbool public hasAuctionStarted = false; \\n\\tbool public whitelistSwitch = false;\\n\\tbool public burnStarted = false;\\n\\n\\taddress public owner = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\taddress public treasury = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\taddress public signer = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\n    // Dutch auction config\\n    uint256 public auctionStartTimestamp; \\n    uint256 public auctionTimeStep;\\n    uint256 public auctionStartPrice;\\n    uint256 public auctionEndPrice;\\n    uint256 public auctionPriceStep;\\n    uint256 public auctionStepNumber;\\n\\n\\tmapping (uint256 => uint256) public quantityLimit;\\n\\tmapping (uint256 => uint256) public idHasMinted;\\n\\tmapping (address => uint256) public addressHasMinted;\\n\\tmapping (address => uint256) public addressHasClaimed;\\n\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()\\n\\tERC1155(\\\"http://api.unnametoken.com/Metadata/{id}\\\")\\n\\tEIP712(\\\"Unname\\\", \\\"1.0.0\\\")\\n\\t{\\n\\t\\tfor (uint index = 1; index < 21; index++){\\n\\t\\t\\tquantityLimit[index] = 110;\\n\\t\\t}\\n\\n\\t\\tfor (uint index = 21; index < 43; index++){\\n\\t\\t\\tquantityLimit[index] = 1;\\n\\t\\t}\\n\\t} \\n\\t\\n\\tfunction name() public view virtual returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view virtual returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 id, uint256 quantity, uint256 totalSupply);\\n\\n\\t// Modifiers\\n\\t// ------------------------------------------------------------------------\\n\\tfunction _onlyOwner() private view {\\n\\t\\trequire(msg.sender == owner, \\\"You are not owner.\\\");\\n\\t}\\n\\n    modifier onlyOwner() {\\n\\t\\t_onlyOwner();\\n        _;\\n    }\\n\\n    modifier onlySale() {\\n\\t\\trequire(hasSaleStarted == true, \\\"SALE_NOT_ACTIVE\\\");\\n        require(block.timestamp >= saleTimestamp, \\\"NOT_IN_SALE_TIME\\\");\\n        _;\\n    }\\n\\n    modifier callerIsUser() {\\n        require(tx.origin == msg.sender, \\\"CALLER_IS_CONTRACT\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn signer == recoveredAddr;\\n\\t}\\n\\n\\t// Random functions\\n\\t// ------------------------------------------------------------------------\\n    function random(string memory seed) private pure returns (uint) {\\n        uint randomHash = uint(keccak256(abi.encode(seed)));\\n\\n        return randomHash % 20;\\n    } \\n\\n\\t// Auction functions\\n\\t// ------------------------------------------------------------------------\\n    function getDutchAuctionPrice() public view returns (uint256) {\\n        require(hasAuctionStarted == true, \\\"AUCTION_NOT_ACTIVE\\\");\\n\\n        if (block.timestamp < auctionStartTimestamp) {\\n            return auctionStartPrice;\\n        } else {\\n            // calculate step\\n            uint256 step = (block.timestamp - auctionStartTimestamp) / auctionTimeStep;\\n            if (step > auctionStepNumber) {\\n                step = auctionStepNumber;\\n            }\\n\\n            // claculate final price\\n            if (auctionStartPrice > step * auctionPriceStep){\\n                return auctionStartPrice - step * auctionPriceStep;\\n            } else {\\n                return auctionEndPrice;\\n            }\\n        }\\n    }\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveawayNFT(address to, uint256 id, uint256 quantity) external onlyOwner{\\n\\t\\trequire(quantity > 0 && idHasMinted[id].add(quantity) <= quantityLimit[id], \\\"Exceeds id quantity limit.\\\");\\n\\n\\t\\t_mint(to, id, quantity, \\\"\\\");\\n\\n\\t\\tif (id > 20) {\\n\\t\\t\\tspecialSupply = specialSupply.add(quantity);\\n\\t\\t} else {\\n\\t\\t\\tnormalSupply = normalSupply.add(quantity);\\n\\t\\t}\\n\\t\\tidHasMinted[id] = idHasMinted[id].add(quantity);\\n\\n\\t\\temit mintEvent(to, id, quantity, totalSupply());\\n\\t}\\n\\n\\t// Claim special card functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction claimSpecial(uint256 maxQuantity, bytes memory SIGNATURE) external payable{\\n\\t\\trequire(hasClaimStarted == true, \\\"Claim has not started.\\\");\\n\\t\\trequire(block.timestamp >= saleTimestamp, \\\"NOT_IN_CLAIM_TIME\\\");\\n\\t\\trequire(specialCardId <= claimStageLimit, \\\"Exceed the special id of claim at this stage.\\\");\\n\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for claim.\\\");\\n\\t\\t\\n\\t\\tuint256 tokenNum = 0;\\n\\t\\tfor (uint index = 1; index < 21; index++){\\n\\t\\t\\tif (balanceOf(msg.sender, index) != 0){\\n\\t\\t\\t\\ttokenNum = tokenNum + 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(tokenNum >= SPECIAL_CARD_CONDITION, \\\"Not enough normal card.\\\");\\n\\t\\trequire(msg.value >= PRICE, \\\"Ether value sent is not equal to the price.\\\");\\n\\t\\trequire(specialSupply.add(1) <= MAX_SPECIAL_TOKEN, \\\"Exceeds MAX_SPECIAL_TOKEN.\\\");\\n\\t\\trequire(idHasMinted[specialCardId].add(1) <= quantityLimit[specialCardId], \\\"Exceeds id quantity limit.\\\");\\n\\t\\trequire(addressHasClaimed[msg.sender].add(1) <= maxQuantity, \\\"Exceeds claim quantity.\\\");\\n\\n\\t\\tidHasMinted[specialCardId] = idHasMinted[specialCardId].add(1);\\n\\t\\taddressHasClaimed[msg.sender] = addressHasClaimed[msg.sender].add(1);\\n\\t\\t\\n\\t\\t_mint(msg.sender, specialCardId, 1, \\\"\\\");\\n\\n\\t\\tspecialSupply = specialSupply.add(1);\\n\\t\\temit mintEvent(msg.sender, specialCardId, 1, totalSupply());\\n\\t\\tspecialCardId = specialCardId + 1; \\n\\t}\\n\\n\\t// Mint normal card functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintNormal(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlySale callerIsUser{\\n\\t\\tif (whitelistSwitch == true) {\\n\\t\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\t\\tMAX_ADDRESS_TOKEN = maxQuantity;\\n\\t\\t}\\n\\t\\tif (hasAuctionStarted == true) {\\n\\t\\t\\trequire(msg.value >= getDutchAuctionPrice().mul(quantity), \\\"Ether value sent is not enough.\\\");\\n\\t\\t\\trequire(quantity > 0 && normalSupply.add(quantity) <= auctionStageLimit, \\\"Exceeds MAX_NORMAL_TOKEN.\\\");\\n\\t\\t} else {\\n\\t\\t\\trequire(msg.value >= PRICE.mul(quantity), \\\"Ether value sent is not equal to the price.\\\");\\n\\t\\t}\\n\\t\\trequire(quantity > 0 && normalSupply.add(quantity) <= MAX_NORMAL_TOKEN, \\\"Exceeds MAX_NORMAL_TOKEN.\\\");\\n\\t\\trequire(addressHasMinted[msg.sender].add(quantity) <= MAX_ADDRESS_TOKEN, \\\"Exceeds quantity.\\\");\\n\\t\\t\\n\\t\\tuint256 randomNum;\\n\\t\\tuint256 tokenId;\\n        for (uint index = 0; index < quantity; index++) {\\n            string memory seed = string(abi.encodePacked(msg.sender, index, block.timestamp));\\n            randomNum = random(seed);\\n\\t\\t\\ttokenId = randomNum + 1;\\n\\n\\t\\t\\twhile(idHasMinted[tokenId].add(1) > quantityLimit[tokenId]) {\\n\\t\\t\\t\\ttokenId = tokenId + 1;\\n\\t\\t\\t\\tif (tokenId > 20) {\\n\\t\\t\\t\\t\\ttokenId = 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\t\\t\\t\\n\\t\\t\\t_mint(msg.sender, tokenId, 1, \\\"\\\");\\n\\n\\t\\t\\tidHasMinted[tokenId] = idHasMinted[tokenId].add(1);\\n\\t\\t\\tnormalSupply = normalSupply.add(1);\\n\\t\\t\\temit mintEvent(msg.sender, tokenId, 1, totalSupply());\\n        }\\n\\t\\taddressHasMinted[msg.sender] = addressHasMinted[msg.sender].add(quantity);\\n\\t}\\n\\n\\t// Burn functions\\n\\t// ------------------------------------------------------------------------\\n    function burn(address account, uint256 id, uint256 quantity) public virtual {\\n        require(burnStarted == true, \\\"Burn hasn't started.\\\");\\n        require(account == tx.origin || isApprovedForAll(account, _msgSender()), \\\"Caller is not owner nor approved.\\\");\\n\\n        _burn(account, id, quantity);\\n    }\\n\\n\\t// TotalSupply functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn normalSupply + specialSupply;\\n\\t}\\n\\n\\n\\t// Setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setTokenLimit(uint256 _MAX_NORMAL_TOKEN, uint256 _MAX_SPECIAL_TOKEN, uint256 _SPECIAL_CARD_CONDITION, uint256 _MAX_ADDRESS_TOKEN, uint256 _specialCardId) external onlyOwner {\\n\\t\\tMAX_NORMAL_TOKEN = _MAX_NORMAL_TOKEN;\\n\\t\\tMAX_SPECIAL_TOKEN = _MAX_SPECIAL_TOKEN;\\n\\t\\tSPECIAL_CARD_CONDITION = _SPECIAL_CARD_CONDITION;\\n\\t\\tMAX_ADDRESS_TOKEN = _MAX_ADDRESS_TOKEN;\\n\\t\\tspecialCardId = _specialCardId;\\n\\t}\\n\\n\\tfunction setIdLimit(uint256 _id, uint256 _MAX) external onlyOwner {\\n\\t\\tquantityLimit[_id] = _MAX;\\n\\t}\\n\\n\\tfunction setPRICE(uint256 _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n\\tfunction setStageLimit(uint _claimStageLimit, uint _auctionStageLimit) external onlyOwner {\\n\\t\\tclaimStageLimit = _claimStageLimit;\\n\\t\\tauctionStageLimit = _auctionStageLimit;\\n\\t}\\n\\n\\tfunction setBaseURI(string memory baseURI) public onlyOwner {\\n\\t\\t_setURI(baseURI);\\n\\t}\\n\\n\\tfunction setOwner(address _owner) public onlyOwner {\\n\\t\\towner = _owner;\\n\\t}\\n\\n    function setBurn(bool _burnStarted) external onlyOwner {\\n        burnStarted = _burnStarted;\\n    }\\n\\t\\n    function setSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        signer = _signer;\\n    }\\n\\n    function setSaleSwitch(\\n\\t\\tbool _hasSaleStarted, \\n\\t\\tbool _hasClaimStarted, \\n\\t\\tbool _hasAuctionStarted, \\n\\t\\tbool _whitelistSwitch, \\n\\t\\tuint256 _saleTimestamp\\n\\t) external onlyOwner {\\n        hasSaleStarted = _hasSaleStarted;\\n\\t\\thasClaimStarted = _hasClaimStarted;\\n\\t\\thasAuctionStarted = _hasAuctionStarted;\\n\\t\\twhitelistSwitch = _whitelistSwitch;\\n        saleTimestamp = _saleTimestamp;\\n    }\\n\\n    function setDutchAuction(\\n        uint256 _auctionStartTimestamp, \\n        uint256 _auctionTimeStep, \\n        uint256 _auctionStartPrice, \\n        uint256 _auctionEndPrice, \\n        uint256 _auctionPriceStep, \\n        uint256 _auctionStepNumber\\n    ) external onlyOwner {\\n        auctionStartTimestamp = _auctionStartTimestamp;\\n        auctionTimeStep = _auctionTimeStep;\\n        auctionStartPrice = _auctionStartPrice;\\n        auctionEndPrice = _auctionEndPrice;\\n        auctionPriceStep = _auctionPriceStep;\\n        auctionStepNumber = _auctionStepNumber;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x13cb9e33580d9bc0382538ea791b5579bf8d810403518050b90a58d90a430335\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526001610120819052600560fc1b61014090815262000027916003919062000288565b50604080518082019091526004808252631411955560e21b602090920191825262000053918162000288565b50610898600581905560166006556003600755600a60088190556702c68af0bb1400006009556361e5301090556000600b819055600c55601e600d55600e556015600f55601080546001600160c81b031916785279246e3626cebe71a4c181382a50a71d2a4156000000000017905560118054735279246e3626cebe71a4c181382a50a71d2a41566001600160a01b031991821681179092556012805490911690911790553480156200010557600080fd5b5060405180606001604052806028815260200162003bd5602891396040805180820182526006815265556e6e616d6560d01b60208083019182528351808501855260058152640312e302e360dc1b908201529151902060c08181527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60e08190524660a081815286517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8188018190528189019690965260608101939093526080808401929092523083820152865180840390910181529190920190945283519390920192909220905261010052620001fe816200026f565b5060015b601581101562000233576000818152601960205260409020606e9055806200022a816200036b565b91505062000202565b5060155b602b8110156200026857600081815260196020526040902060019055806200025f816200036b565b91505062000237565b5062000393565b80516200028490600290602084019062000288565b5050565b82805462000296906200032e565b90600052602060002090601f016020900481019282620002ba576000855562000305565b82601f10620002d557805160ff191683800117855562000305565b8280016001018555821562000305579182015b8281111562000305578251825591602001919060010190620002e8565b506200031392915062000317565b5090565b5b8082111562000313576000815560010162000318565b600181811c908216806200034357607f821691505b602082108114156200036557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200038c57634e487b7160e01b81526011600452602481fd5b5060010190565b60805160a05160c05160e051610100516137fd620003d860003960006128390152600061288801526000612863015260006127e70152600061281001526137fd6000f3fe6080604052600436106103805760003560e01c8063862a2b45116101d1578063c6a96c8f11610102578063e7e43465116100a0578063f242432a1161006f578063f242432a146109fe578063f5298aca14610a1e578063f5bb134e14610a3e578063fbf76eb214610a5457600080fd5b8063e7e4346514610955578063e985e9c514610975578063eea52d38146109be578063f0f44260146109de57600080fd5b8063d756985b116100dc578063d756985b146108e6578063d7eef865146108fc578063dcb8101f14610912578063e2e771a41461093f57600080fd5b8063c6a96c8f146108a4578063c7822598146108ba578063cca8a0d8146108d057600080fd5b8063a22cb4651161016f578063bcd25ee511610149578063bcd25ee51461083a578063bd55cf0d1461085b578063c44f81e21461087b578063c4f9ff101461089157600080fd5b8063a22cb465146107d7578063a5b5665c146107f7578063b2a098d91461080d57600080fd5b80639196eba5116101ab5780639196eba51461078057806395d89b4114610796578063964dd240146107ab578063a04a6ac8146107c157600080fd5b8063862a2b451461072b5780638d859f3e146107415780638da5cb5b1461075757600080fd5b80632e1de27f116102b65780634ca4fb34116102545780636c19e783116102235780636c19e783146106c4578063717bf336146106e4578063853828b61461070357806385852ce41461070b57600080fd5b80634ca4fb341461062a5780634e1273f41461065757806355f804b31461068457806361d027b3146106a457600080fd5b806344944f311161029057806344944f31146105bc5780634698a3d8146105e957806348b5f2bc146105ff5780634b30a9101461061557600080fd5b80632e1de27f146105695780632eb2c2d61461057c5780634017b12f1461059c57600080fd5b806318160ddd11610323578063238ac933116102fd578063238ac933146104d157806326df66ce14610509578063271cb22f146105295780632db218b61461054957600080fd5b806318160ddd1461048257806319cb4a1c146104975780631c8b232d146104b757600080fd5b80630af012dd1161035f5780630af012dd1461040a5780630b07e4d11461042c5780630e89341c1461044257806313af40351461046257600080fd5b8062fdd58e1461038557806301ffc9a7146103b857806306fdde03146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004612f8e565b610a76565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d3366004613129565b610b0d565b60405190151581526020016103af565b3480156103f457600080fd5b506103fd610b5f565b6040516103af919061347c565b34801561041657600080fd5b5061042a610425366004613202565b610bf1565b005b34801561043857600080fd5b506103a560055481565b34801561044e57600080fd5b506103fd61045d3660046131af565b610c04565b34801561046e57600080fd5b5061042a61047d366004612e10565b610c98565b34801561048e57600080fd5b506103a5610cd0565b3480156104a357600080fd5b5061042a6104b2366004613271565b610ce7565b3480156104c357600080fd5b506010546103d89060ff1681565b3480156104dd57600080fd5b506012546104f1906001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b34801561051557600080fd5b506010546103d89062010000900460ff1681565b34801561053557600080fd5b5061042a610544366004613202565b610d06565b34801561055557600080fd5b5061042a6105643660046130ce565b610d20565b61042a6105773660046131c7565b610d7c565b34801561058857600080fd5b5061042a610597366004612e5c565b6111b5565b3480156105a857600080fd5b5061042a6105b7366004612fb7565b61124c565b3480156105c857600080fd5b506103a56105d7366004612e10565b601c6020526000908152604090205481565b3480156105f557600080fd5b506103a560175481565b34801561060b57600080fd5b506103a5600b5481565b34801561062157600080fd5b506103a561138e565b34801561063657600080fd5b506103a56106453660046131af565b601a6020526000908152604090205481565b34801561066357600080fd5b50610677610672366004612fe9565b611465565b6040516103af919061343b565b34801561069057600080fd5b5061042a61069f366004613161565b6115c7565b3480156106b057600080fd5b506011546104f1906001600160a01b031681565b3480156106d057600080fd5b5061042a6106df366004612e10565b6115db565b3480156106f057600080fd5b506010546103d890610100900460ff1681565b61042a611652565b34801561071757600080fd5b506103d86107263660046131c7565b61168d565b34801561073757600080fd5b506103a560085481565b34801561074d57600080fd5b506103a560095481565b34801561076357600080fd5b506010546104f1906501000000000090046001600160a01b031681565b34801561078c57600080fd5b506103a560145481565b3480156107a257600080fd5b506103fd611717565b3480156107b757600080fd5b506103a560185481565b3480156107cd57600080fd5b506103a560165481565b3480156107e357600080fd5b5061042a6107f2366004612f65565b611726565b34801561080357600080fd5b506103a5600c5481565b34801561081957600080fd5b506103a5610828366004612e10565b601b6020526000908152604090205481565b34801561084657600080fd5b506010546103d8906301000000900460ff1681565b34801561086757600080fd5b5061042a6108763660046130b4565b6117fd565b34801561088757600080fd5b506103a5600d5481565b61042a61089f366004613223565b611825565b3480156108b057600080fd5b506103a560135481565b3480156108c657600080fd5b506103a5600a5481565b3480156108dc57600080fd5b506103a560075481565b3480156108f257600080fd5b506103a560155481565b34801561090857600080fd5b506103a5600e5481565b34801561091e57600080fd5b506103a561092d3660046131af565b60196020526000908152604090205481565b34801561094b57600080fd5b506103a5600f5481565b34801561096157600080fd5b5061042a6109703660046132ab565b611ccf565b34801561098157600080fd5b506103d8610990366004612e2a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156109ca57600080fd5b5061042a6109d93660046131af565b611cf4565b3480156109ea57600080fd5b5061042a6109f9366004612e10565b611d01565b348015610a0a57600080fd5b5061042a610a19366004612f02565b611d2b565b348015610a2a57600080fd5b5061042a610a39366004612fb7565b611db2565b348015610a4a57600080fd5b506103a560065481565b348015610a6057600080fd5b506010546103d890640100000000900460ff1681565b60006001600160a01b038316610ae75760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b1480610b3e57506001600160e01b031982166303a24d0760e21b145b80610b5957506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060038054610b6e90613637565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9a90613637565b8015610be75780601f10610bbc57610100808354040283529160200191610be7565b820191906000526020600020905b815481529060010190602001808311610bca57829003601f168201915b5050505050905090565b610bf9611e8a565b600d91909155600e55565b606060028054610c1390613637565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3f90613637565b8015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b820191906000526020600020905b815481529060010190602001808311610c6f57829003601f168201915b50505050509050919050565b610ca0611e8a565b601080546001600160a01b03909216650100000000000265010000000000600160c81b0319909216919091179055565b6000600c54600b54610ce291906135d5565b905090565b610cef611e8a565b600594909455600692909255600755600855600f55565b610d0e611e8a565b60009182526019602052604090912055565b610d28611e8a565b6010805492151563010000000263ff0000001994151562010000029490941663ffff0000199515156101000261ff00199715159790971661ffff199094169390931795909517939093161717909155600a55565b60105460ff610100909104161515600114610dd25760405162461bcd60e51b815260206004820152601660248201527521b630b4b6903430b9903737ba1039ba30b93a32b21760511b6044820152606401610ade565b600a54421015610e185760405162461bcd60e51b81526020600482015260116024820152704e4f545f494e5f434c41494d5f54494d4560781b6044820152606401610ade565b600d54600f541115610e825760405162461bcd60e51b815260206004820152602d60248201527f45786365656420746865207370656369616c206964206f6620636c61696d206160448201526c3a103a3434b99039ba30b3b29760991b6064820152608401610ade565b610e8c828261168d565b610ed85760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656c696769626c6520666f7220636c61696d2e0000000000000000006044820152606401610ade565b600060015b6015811015610f1557610ef03382610a76565b15610f0357610f008260016135d5565b91505b80610f0d8161369f565b915050610edd565b50600754811015610f685760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768206e6f726d616c20636172642e0000000000000000006044820152606401610ade565b600954341015610f8a5760405162461bcd60e51b8152600401610ade906134d7565b600654600c54610f9b906001611ee2565b1115610fe95760405162461bcd60e51b815260206004820152601a60248201527f45786365656473204d41585f5350454349414c5f544f4b454e2e0000000000006044820152606401610ade565b600f54600090815260196020908152604080832054601a90925290912054611012906001611ee2565b11156110605760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610ade565b336000908152601c6020526040902054839061107d906001611ee2565b11156110cb5760405162461bcd60e51b815260206004820152601760248201527f4578636565647320636c61696d207175616e746974792e0000000000000000006044820152606401610ade565b600f546000908152601a60205260409020546110e8906001611ee2565b600f546000908152601a6020908152604080832093909355338252601c90522054611114906001611ee2565b336000818152601c6020908152604080832094909455600f5484519182019094529081526111459290600190611ef5565b600c54611153906001611ee2565b600c55600f547fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c8649033906001611187610cd0565b6040516111979493929190613415565b60405180910390a1600f546111ad9060016135d5565b600f55505050565b6001600160a01b0385163314806111d157506111d18533610990565b6112385760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610ade565b6112458585858585611fff565b5050505050565b611254611e8a565b6000811180156112875750600082815260196020908152604080832054601a909252909120546112849083611ee2565b11155b6112d35760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610ade565b6112ee83838360405180602001604052806000815250611ef5565b601482111561130c57600c546113049082611ee2565b600c5561131d565b600b546113199082611ee2565b600b555b6000828152601a60205260409020546113369082611ee2565b6000838152601a60205260409020557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c864838383611371610cd0565b6040516113819493929190613415565b60405180910390a1505050565b60105460009062010000900460ff1615156001146113e35760405162461bcd60e51b815260206004820152601260248201527141554354494f4e5f4e4f545f41435449564560701b6044820152606401610ade565b6013544210156113f4575060155490565b6000601454601354426114079190613620565b61141191906135ed565b905060185481111561142257506018545b60175461142f9082613601565b6015541115611458576017546114459082613601565b6015546114529190613620565b91505090565b505060165490565b505b90565b606081518351146114ca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610ade565b6000835167ffffffffffffffff8111156114f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561151d578160200160208202803683370190505b50905060005b84518110156115bf5761158485828151811061154f57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061157757634e487b7160e01b600052603260045260246000fd5b6020026020010151610a76565b8282815181106115a457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526115b88161369f565b9050611523565b509392505050565b6115cf611e8a565b6115d8816121f8565b50565b6115e3611e8a565b6001600160a01b0381166116305760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610ade565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b61165a611e8a565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061168b57600080fd5b565b6000806116fe6116f87f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b0390911690820152606081018790526080016040516020818303038152906040528051906020012061220f565b8461225d565b6012546001600160a01b03918216911614949350505050565b606060048054610b6e90613637565b336001600160a01b03831614156117915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610ade565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611805611e8a565b601080549115156401000000000264ff0000000019909216919091179055565b60105460ff16151560011461186e5760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b6044820152606401610ade565b600a544210156118b35760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b6044820152606401610ade565b3233146118f75760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b6044820152606401610ade565b6010546301000000900460ff1615156001141561196a57611918828261168d565b6119645760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610ade565b60088290555b60105462010000900460ff16151560011415611a4c576119928361198c61138e565b90612279565b3410156119e15760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420656e6f7567682e006044820152606401610ade565b6000831180156119ff5750600e54600b546119fc9085611ee2565b11155b611a475760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610ade565b611a78565b600954611a599084612279565b341015611a785760405162461bcd60e51b8152600401610ade906134d7565b600083118015611a965750600554600b54611a939085611ee2565b11155b611ade5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610ade565b600854336000908152601b6020526040902054611afb9085611ee2565b1115611b3d5760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399038bab0b73a34ba3c9760791b6044820152606401610ade565b60008060005b85811015611c9d576040516bffffffffffffffffffffffff193360601b166020820152603481018290524260548201526000906074016040516020818303038152906040529050611b9381612285565b9350611ba08460016135d5565b92505b600083815260196020908152604080832054601a90925290912054611bc9906001611ee2565b1115611bef57611bda8360016135d5565b92506014831115611bea57600192505b611ba3565b611c0b3384600160405180602001604052806000815250611ef5565b6000838152601a6020526040902054611c25906001611ee2565b6000848152601a6020526040902055600b54611c42906001611ee2565b600b557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86433846001611c72610cd0565b604051611c829493929190613415565b60405180910390a15080611c958161369f565b915050611b43565b50336000908152601b6020526040902054611cb89086611ee2565b336000908152601b60205260409020555050505050565b611cd7611e8a565b601395909555601493909355601591909155601655601755601855565b611cfc611e8a565b600955565b611d09611e8a565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480611d475750611d478533610990565b611da55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610ade565b61124585858585856122be565b601054640100000000900460ff161515600114611e085760405162461bcd60e51b8152602060048201526014602482015273213ab937103430b9b713ba1039ba30b93a32b21760611b6044820152606401610ade565b6001600160a01b038316321480611e245750611e248333610990565b611e7a5760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152601760f91b6064820152608401610ade565b611e858383836123db565b505050565b6010546501000000000090046001600160a01b0316331461168b5760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b6044820152606401610ade565b6000611eee82846135d5565b9392505050565b6001600160a01b038416611f555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610ade565b33611f6f81600087611f6688612555565b61124588612555565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611f9f9084906135d5565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611245816000878787876125ae565b81518351146120615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610ade565b6001600160a01b0384166120875760405162461bcd60e51b8152600401610ade90613522565b3360005b845181101561218a5760008582815181106120b657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106120e257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156121325760405162461bcd60e51b8152600401610ade90613567565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061216f9084906135d5565b92505081905550505050806121839061369f565b905061208b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516121da92919061344e565b60405180910390a46121f0818787878787612719565b505050505050565b805161220b906002906020840190612c63565b5050565b6000610b5961221c6127e3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061226c85856128d6565b915091506115bf81612946565b6000611eee8284613601565b60008082604051602001612299919061347c565b60408051601f1981840301815291905280516020909101209050611eee6014826136ba565b6001600160a01b0384166122e45760405162461bcd60e51b8152600401610ade90613522565b336122f4818787611f6688612555565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156123355760405162461bcd60e51b8152600401610ade90613567565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906123729084906135d5565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46123d28288888888886125ae565b50505050505050565b6001600160a01b03831661243d5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610ade565b3361246d8185600061244e87612555565b61245787612555565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156124ea5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610ade565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061259d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156121f05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125f290899089908890889088906004016133d0565b602060405180830381600087803b15801561260c57600080fd5b505af192505050801561263c575060408051601f3d908101601f1916820190925261263991810190613145565b60015b6126e957612648613710565b806308c379a01415612682575061265d613727565b806126685750612684565b8060405162461bcd60e51b8152600401610ade919061347c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610ade565b6001600160e01b0319811663f23a6e6160e01b146123d25760405162461bcd60e51b8152600401610ade9061348f565b6001600160a01b0384163b156121f05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061275d9089908990889088908890600401613372565b602060405180830381600087803b15801561277757600080fd5b505af19250505080156127a7575060408051601f3d908101601f191682019092526127a491810190613145565b60015b6127b357612648613710565b6001600160e01b0319811663bc197c8160e01b146123d25760405162461bcd60e51b8152600401610ade9061348f565b60007f000000000000000000000000000000000000000000000000000000000000000046141561283257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041141561290d5760208301516040840151606085015160001a61290187828585612b47565b9450945050505061293f565b825160401415612937576020830151604084015161292c868383612c34565b93509350505061293f565b506000905060025b9250929050565b600081600481111561296857634e487b7160e01b600052602160045260246000fd5b14156129715750565b600181600481111561299357634e487b7160e01b600052602160045260246000fd5b14156129e15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ade565b6002816004811115612a0357634e487b7160e01b600052602160045260246000fd5b1415612a515760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ade565b6003816004811115612a7357634e487b7160e01b600052602160045260246000fd5b1415612acc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ade565b6004816004811115612aee57634e487b7160e01b600052602160045260246000fd5b14156115d85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610ade565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b7e5750600090506003612c2b565b8460ff16601b14158015612b9657508460ff16601c14155b15612ba75750600090506004612c2b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c2457600060019250925050612c2b565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01612c5587828885612b47565b935093505050935093915050565b828054612c6f90613637565b90600052602060002090601f016020900481019282612c915760008555612cd7565b82601f10612caa57805160ff1916838001178555612cd7565b82800160010185558215612cd7579182015b82811115612cd7578251825591602001919060010190612cbc565b506114609291505b808211156114605760008155600101612cdf565b600067ffffffffffffffff831115612d0d57612d0d6136fa565b604051612d24601f8501601f191660200182613672565b809150838152848484011115612d3957600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612d6857600080fd5b919050565b600082601f830112612d7d578081fd5b81356020612d8a826135b1565b604051612d978282613672565b8381528281019150858301600585901b87018401881015612db6578586fd5b855b85811015612dd457813584529284019290840190600101612db8565b5090979650505050505050565b80358015158114612d6857600080fd5b600082601f830112612e01578081fd5b611eee83833560208501612cf3565b600060208284031215612e21578081fd5b611eee82612d51565b60008060408385031215612e3c578081fd5b612e4583612d51565b9150612e5360208401612d51565b90509250929050565b600080600080600060a08688031215612e73578081fd5b612e7c86612d51565b9450612e8a60208701612d51565b9350604086013567ffffffffffffffff80821115612ea6578283fd5b612eb289838a01612d6d565b94506060880135915080821115612ec7578283fd5b612ed389838a01612d6d565b93506080880135915080821115612ee8578283fd5b50612ef588828901612df1565b9150509295509295909350565b600080600080600060a08688031215612f19578081fd5b612f2286612d51565b9450612f3060208701612d51565b93506040860135925060608601359150608086013567ffffffffffffffff811115612f59578182fd5b612ef588828901612df1565b60008060408385031215612f77578182fd5b612f8083612d51565b9150612e5360208401612de1565b60008060408385031215612fa0578182fd5b612fa983612d51565b946020939093013593505050565b600080600060608486031215612fcb578283fd5b612fd484612d51565b95602085013595506040909401359392505050565b60008060408385031215612ffb578182fd5b823567ffffffffffffffff80821115613012578384fd5b818501915085601f830112613025578384fd5b81356020613032826135b1565b60405161303f8282613672565b8381528281019150858301600585901b870184018b101561305e578889fd5b8896505b848710156130875761307381612d51565b835260019690960195918301918301613062565b509650508601359250508082111561309d578283fd5b506130aa85828601612d6d565b9150509250929050565b6000602082840312156130c5578081fd5b611eee82612de1565b600080600080600060a086880312156130e5578283fd5b6130ee86612de1565b94506130fc60208701612de1565b935061310a60408701612de1565b925061311860608701612de1565b949793965091946080013592915050565b60006020828403121561313a578081fd5b8135611eee816137b1565b600060208284031215613156578081fd5b8151611eee816137b1565b600060208284031215613172578081fd5b813567ffffffffffffffff811115613188578182fd5b8201601f81018413613198578182fd5b6131a784823560208401612cf3565b949350505050565b6000602082840312156131c0578081fd5b5035919050565b600080604083850312156131d9578182fd5b82359150602083013567ffffffffffffffff8111156131f6578182fd5b6130aa85828601612df1565b60008060408385031215613214578182fd5b50508035926020909101359150565b600080600060608486031215613237578081fd5b8335925060208401359150604084013567ffffffffffffffff81111561325b578182fd5b61326786828701612df1565b9150509250925092565b600080600080600060a08688031215613288578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c087890312156132c3578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000815180845260208085019450808401835b8381101561331c57815187529582019590820190600101613300565b509495945050505050565b60008151808452815b8181101561334c57602081850181015186830182015201613330565b8181111561335d5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a06040820181905260009061339e908301866132ed565b82810360608401526133b081866132ed565b905082810360808401526133c48185613327565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061340a90830184613327565b979650505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b602081526000611eee60208301846132ed565b60408152600061346160408301856132ed565b828103602084015261347381856132ed565b95945050505050565b602081526000611eee6020830184613327565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f45746865722076616c75652073656e74206973206e6f7420657175616c20746f60408201526a103a343290383934b1b29760a91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600067ffffffffffffffff8211156135cb576135cb6136fa565b5060051b60200190565b600082198211156135e8576135e86136ce565b500190565b6000826135fc576135fc6136e4565b500490565b600081600019048311821515161561361b5761361b6136ce565b500290565b600082821015613632576136326136ce565b500390565b600181811c9082168061364b57607f821691505b6020821081141561366c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715613698576136986136fa565b6040525050565b60006000198214156136b3576136b36136ce565b5060010190565b6000826136c9576136c96136e4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561146257600481823e5160e01c90565b600060443d10156137355790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561376557505050505090565b828501915081518181111561377d5750505050505090565b843d87010160208285010111156137975750505050505090565b6137a660208286010187613672565b509095945050505050565b6001600160e01b0319811681146115d857600080fdfea2646970667358221220e11002d8fc6534961d352dcb1f60dc2ac91735ee03bcc7b6beb68aab671bb9f864736f6c63430008040033687474703a2f2f6170692e756e6e616d65746f6b656e2e636f6d2f4d657461646174612f7b69647d",
  "deployedBytecode": "0x6080604052600436106103805760003560e01c8063862a2b45116101d1578063c6a96c8f11610102578063e7e43465116100a0578063f242432a1161006f578063f242432a146109fe578063f5298aca14610a1e578063f5bb134e14610a3e578063fbf76eb214610a5457600080fd5b8063e7e4346514610955578063e985e9c514610975578063eea52d38146109be578063f0f44260146109de57600080fd5b8063d756985b116100dc578063d756985b146108e6578063d7eef865146108fc578063dcb8101f14610912578063e2e771a41461093f57600080fd5b8063c6a96c8f146108a4578063c7822598146108ba578063cca8a0d8146108d057600080fd5b8063a22cb4651161016f578063bcd25ee511610149578063bcd25ee51461083a578063bd55cf0d1461085b578063c44f81e21461087b578063c4f9ff101461089157600080fd5b8063a22cb465146107d7578063a5b5665c146107f7578063b2a098d91461080d57600080fd5b80639196eba5116101ab5780639196eba51461078057806395d89b4114610796578063964dd240146107ab578063a04a6ac8146107c157600080fd5b8063862a2b451461072b5780638d859f3e146107415780638da5cb5b1461075757600080fd5b80632e1de27f116102b65780634ca4fb34116102545780636c19e783116102235780636c19e783146106c4578063717bf336146106e4578063853828b61461070357806385852ce41461070b57600080fd5b80634ca4fb341461062a5780634e1273f41461065757806355f804b31461068457806361d027b3146106a457600080fd5b806344944f311161029057806344944f31146105bc5780634698a3d8146105e957806348b5f2bc146105ff5780634b30a9101461061557600080fd5b80632e1de27f146105695780632eb2c2d61461057c5780634017b12f1461059c57600080fd5b806318160ddd11610323578063238ac933116102fd578063238ac933146104d157806326df66ce14610509578063271cb22f146105295780632db218b61461054957600080fd5b806318160ddd1461048257806319cb4a1c146104975780631c8b232d146104b757600080fd5b80630af012dd1161035f5780630af012dd1461040a5780630b07e4d11461042c5780630e89341c1461044257806313af40351461046257600080fd5b8062fdd58e1461038557806301ffc9a7146103b857806306fdde03146103e8575b600080fd5b34801561039157600080fd5b506103a56103a0366004612f8e565b610a76565b6040519081526020015b60405180910390f35b3480156103c457600080fd5b506103d86103d3366004613129565b610b0d565b60405190151581526020016103af565b3480156103f457600080fd5b506103fd610b5f565b6040516103af919061347c565b34801561041657600080fd5b5061042a610425366004613202565b610bf1565b005b34801561043857600080fd5b506103a560055481565b34801561044e57600080fd5b506103fd61045d3660046131af565b610c04565b34801561046e57600080fd5b5061042a61047d366004612e10565b610c98565b34801561048e57600080fd5b506103a5610cd0565b3480156104a357600080fd5b5061042a6104b2366004613271565b610ce7565b3480156104c357600080fd5b506010546103d89060ff1681565b3480156104dd57600080fd5b506012546104f1906001600160a01b031681565b6040516001600160a01b0390911681526020016103af565b34801561051557600080fd5b506010546103d89062010000900460ff1681565b34801561053557600080fd5b5061042a610544366004613202565b610d06565b34801561055557600080fd5b5061042a6105643660046130ce565b610d20565b61042a6105773660046131c7565b610d7c565b34801561058857600080fd5b5061042a610597366004612e5c565b6111b5565b3480156105a857600080fd5b5061042a6105b7366004612fb7565b61124c565b3480156105c857600080fd5b506103a56105d7366004612e10565b601c6020526000908152604090205481565b3480156105f557600080fd5b506103a560175481565b34801561060b57600080fd5b506103a5600b5481565b34801561062157600080fd5b506103a561138e565b34801561063657600080fd5b506103a56106453660046131af565b601a6020526000908152604090205481565b34801561066357600080fd5b50610677610672366004612fe9565b611465565b6040516103af919061343b565b34801561069057600080fd5b5061042a61069f366004613161565b6115c7565b3480156106b057600080fd5b506011546104f1906001600160a01b031681565b3480156106d057600080fd5b5061042a6106df366004612e10565b6115db565b3480156106f057600080fd5b506010546103d890610100900460ff1681565b61042a611652565b34801561071757600080fd5b506103d86107263660046131c7565b61168d565b34801561073757600080fd5b506103a560085481565b34801561074d57600080fd5b506103a560095481565b34801561076357600080fd5b506010546104f1906501000000000090046001600160a01b031681565b34801561078c57600080fd5b506103a560145481565b3480156107a257600080fd5b506103fd611717565b3480156107b757600080fd5b506103a560185481565b3480156107cd57600080fd5b506103a560165481565b3480156107e357600080fd5b5061042a6107f2366004612f65565b611726565b34801561080357600080fd5b506103a5600c5481565b34801561081957600080fd5b506103a5610828366004612e10565b601b6020526000908152604090205481565b34801561084657600080fd5b506010546103d8906301000000900460ff1681565b34801561086757600080fd5b5061042a6108763660046130b4565b6117fd565b34801561088757600080fd5b506103a5600d5481565b61042a61089f366004613223565b611825565b3480156108b057600080fd5b506103a560135481565b3480156108c657600080fd5b506103a5600a5481565b3480156108dc57600080fd5b506103a560075481565b3480156108f257600080fd5b506103a560155481565b34801561090857600080fd5b506103a5600e5481565b34801561091e57600080fd5b506103a561092d3660046131af565b60196020526000908152604090205481565b34801561094b57600080fd5b506103a5600f5481565b34801561096157600080fd5b5061042a6109703660046132ab565b611ccf565b34801561098157600080fd5b506103d8610990366004612e2a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156109ca57600080fd5b5061042a6109d93660046131af565b611cf4565b3480156109ea57600080fd5b5061042a6109f9366004612e10565b611d01565b348015610a0a57600080fd5b5061042a610a19366004612f02565b611d2b565b348015610a2a57600080fd5b5061042a610a39366004612fb7565b611db2565b348015610a4a57600080fd5b506103a560065481565b348015610a6057600080fd5b506010546103d890640100000000900460ff1681565b60006001600160a01b038316610ae75760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b1480610b3e57506001600160e01b031982166303a24d0760e21b145b80610b5957506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060038054610b6e90613637565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9a90613637565b8015610be75780601f10610bbc57610100808354040283529160200191610be7565b820191906000526020600020905b815481529060010190602001808311610bca57829003601f168201915b5050505050905090565b610bf9611e8a565b600d91909155600e55565b606060028054610c1390613637565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3f90613637565b8015610c8c5780601f10610c6157610100808354040283529160200191610c8c565b820191906000526020600020905b815481529060010190602001808311610c6f57829003601f168201915b50505050509050919050565b610ca0611e8a565b601080546001600160a01b03909216650100000000000265010000000000600160c81b0319909216919091179055565b6000600c54600b54610ce291906135d5565b905090565b610cef611e8a565b600594909455600692909255600755600855600f55565b610d0e611e8a565b60009182526019602052604090912055565b610d28611e8a565b6010805492151563010000000263ff0000001994151562010000029490941663ffff0000199515156101000261ff00199715159790971661ffff199094169390931795909517939093161717909155600a55565b60105460ff610100909104161515600114610dd25760405162461bcd60e51b815260206004820152601660248201527521b630b4b6903430b9903737ba1039ba30b93a32b21760511b6044820152606401610ade565b600a54421015610e185760405162461bcd60e51b81526020600482015260116024820152704e4f545f494e5f434c41494d5f54494d4560781b6044820152606401610ade565b600d54600f541115610e825760405162461bcd60e51b815260206004820152602d60248201527f45786365656420746865207370656369616c206964206f6620636c61696d206160448201526c3a103a3434b99039ba30b3b29760991b6064820152608401610ade565b610e8c828261168d565b610ed85760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656c696769626c6520666f7220636c61696d2e0000000000000000006044820152606401610ade565b600060015b6015811015610f1557610ef03382610a76565b15610f0357610f008260016135d5565b91505b80610f0d8161369f565b915050610edd565b50600754811015610f685760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768206e6f726d616c20636172642e0000000000000000006044820152606401610ade565b600954341015610f8a5760405162461bcd60e51b8152600401610ade906134d7565b600654600c54610f9b906001611ee2565b1115610fe95760405162461bcd60e51b815260206004820152601a60248201527f45786365656473204d41585f5350454349414c5f544f4b454e2e0000000000006044820152606401610ade565b600f54600090815260196020908152604080832054601a90925290912054611012906001611ee2565b11156110605760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610ade565b336000908152601c6020526040902054839061107d906001611ee2565b11156110cb5760405162461bcd60e51b815260206004820152601760248201527f4578636565647320636c61696d207175616e746974792e0000000000000000006044820152606401610ade565b600f546000908152601a60205260409020546110e8906001611ee2565b600f546000908152601a6020908152604080832093909355338252601c90522054611114906001611ee2565b336000818152601c6020908152604080832094909455600f5484519182019094529081526111459290600190611ef5565b600c54611153906001611ee2565b600c55600f547fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c8649033906001611187610cd0565b6040516111979493929190613415565b60405180910390a1600f546111ad9060016135d5565b600f55505050565b6001600160a01b0385163314806111d157506111d18533610990565b6112385760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610ade565b6112458585858585611fff565b5050505050565b611254611e8a565b6000811180156112875750600082815260196020908152604080832054601a909252909120546112849083611ee2565b11155b6112d35760405162461bcd60e51b815260206004820152601a60248201527f45786365656473206964207175616e74697479206c696d69742e0000000000006044820152606401610ade565b6112ee83838360405180602001604052806000815250611ef5565b601482111561130c57600c546113049082611ee2565b600c5561131d565b600b546113199082611ee2565b600b555b6000828152601a60205260409020546113369082611ee2565b6000838152601a60205260409020557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c864838383611371610cd0565b6040516113819493929190613415565b60405180910390a1505050565b60105460009062010000900460ff1615156001146113e35760405162461bcd60e51b815260206004820152601260248201527141554354494f4e5f4e4f545f41435449564560701b6044820152606401610ade565b6013544210156113f4575060155490565b6000601454601354426114079190613620565b61141191906135ed565b905060185481111561142257506018545b60175461142f9082613601565b6015541115611458576017546114459082613601565b6015546114529190613620565b91505090565b505060165490565b505b90565b606081518351146114ca5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610ade565b6000835167ffffffffffffffff8111156114f457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561151d578160200160208202803683370190505b50905060005b84518110156115bf5761158485828151811061154f57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061157757634e487b7160e01b600052603260045260246000fd5b6020026020010151610a76565b8282815181106115a457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526115b88161369f565b9050611523565b509392505050565b6115cf611e8a565b6115d8816121f8565b50565b6115e3611e8a565b6001600160a01b0381166116305760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610ade565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b61165a611e8a565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061168b57600080fd5b565b6000806116fe6116f87f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b0390911690820152606081018790526080016040516020818303038152906040528051906020012061220f565b8461225d565b6012546001600160a01b03918216911614949350505050565b606060048054610b6e90613637565b336001600160a01b03831614156117915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610ade565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b611805611e8a565b601080549115156401000000000264ff0000000019909216919091179055565b60105460ff16151560011461186e5760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b6044820152606401610ade565b600a544210156118b35760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b6044820152606401610ade565b3233146118f75760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b6044820152606401610ade565b6010546301000000900460ff1615156001141561196a57611918828261168d565b6119645760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610ade565b60088290555b60105462010000900460ff16151560011415611a4c576119928361198c61138e565b90612279565b3410156119e15760405162461bcd60e51b815260206004820152601f60248201527f45746865722076616c75652073656e74206973206e6f7420656e6f7567682e006044820152606401610ade565b6000831180156119ff5750600e54600b546119fc9085611ee2565b11155b611a475760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610ade565b611a78565b600954611a599084612279565b341015611a785760405162461bcd60e51b8152600401610ade906134d7565b600083118015611a965750600554600b54611a939085611ee2565b11155b611ade5760405162461bcd60e51b815260206004820152601960248201527822bc31b2b2b2399026a0ac2fa727a926a0a62faa27a5a2a71760391b6044820152606401610ade565b600854336000908152601b6020526040902054611afb9085611ee2565b1115611b3d5760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399038bab0b73a34ba3c9760791b6044820152606401610ade565b60008060005b85811015611c9d576040516bffffffffffffffffffffffff193360601b166020820152603481018290524260548201526000906074016040516020818303038152906040529050611b9381612285565b9350611ba08460016135d5565b92505b600083815260196020908152604080832054601a90925290912054611bc9906001611ee2565b1115611bef57611bda8360016135d5565b92506014831115611bea57600192505b611ba3565b611c0b3384600160405180602001604052806000815250611ef5565b6000838152601a6020526040902054611c25906001611ee2565b6000848152601a6020526040902055600b54611c42906001611ee2565b600b557fb32c32014221c522f5b713daa9a1df4bd21450f8b5c763ba3ca01f088f95c86433846001611c72610cd0565b604051611c829493929190613415565b60405180910390a15080611c958161369f565b915050611b43565b50336000908152601b6020526040902054611cb89086611ee2565b336000908152601b60205260409020555050505050565b611cd7611e8a565b601395909555601493909355601591909155601655601755601855565b611cfc611e8a565b600955565b611d09611e8a565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038516331480611d475750611d478533610990565b611da55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610ade565b61124585858585856122be565b601054640100000000900460ff161515600114611e085760405162461bcd60e51b8152602060048201526014602482015273213ab937103430b9b713ba1039ba30b93a32b21760611b6044820152606401610ade565b6001600160a01b038316321480611e245750611e248333610990565b611e7a5760405162461bcd60e51b815260206004820152602160248201527f43616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665646044820152601760f91b6064820152608401610ade565b611e858383836123db565b505050565b6010546501000000000090046001600160a01b0316331461168b5760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b6044820152606401610ade565b6000611eee82846135d5565b9392505050565b6001600160a01b038416611f555760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610ade565b33611f6f81600087611f6688612555565b61124588612555565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611f9f9084906135d5565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611245816000878787876125ae565b81518351146120615760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610ade565b6001600160a01b0384166120875760405162461bcd60e51b8152600401610ade90613522565b3360005b845181101561218a5760008582815181106120b657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106120e257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156121325760405162461bcd60e51b8152600401610ade90613567565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061216f9084906135d5565b92505081905550505050806121839061369f565b905061208b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516121da92919061344e565b60405180910390a46121f0818787878787612719565b505050505050565b805161220b906002906020840190612c63565b5050565b6000610b5961221c6127e3565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061226c85856128d6565b915091506115bf81612946565b6000611eee8284613601565b60008082604051602001612299919061347c565b60408051601f1981840301815291905280516020909101209050611eee6014826136ba565b6001600160a01b0384166122e45760405162461bcd60e51b8152600401610ade90613522565b336122f4818787611f6688612555565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156123355760405162461bcd60e51b8152600401610ade90613567565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906123729084906135d5565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46123d28288888888886125ae565b50505050505050565b6001600160a01b03831661243d5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610ade565b3361246d8185600061244e87612555565b61245787612555565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156124ea5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610ade565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061259d57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156121f05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125f290899089908890889088906004016133d0565b602060405180830381600087803b15801561260c57600080fd5b505af192505050801561263c575060408051601f3d908101601f1916820190925261263991810190613145565b60015b6126e957612648613710565b806308c379a01415612682575061265d613727565b806126685750612684565b8060405162461bcd60e51b8152600401610ade919061347c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610ade565b6001600160e01b0319811663f23a6e6160e01b146123d25760405162461bcd60e51b8152600401610ade9061348f565b6001600160a01b0384163b156121f05760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061275d9089908990889088908890600401613372565b602060405180830381600087803b15801561277757600080fd5b505af19250505080156127a7575060408051601f3d908101601f191682019092526127a491810190613145565b60015b6127b357612648613710565b6001600160e01b0319811663bc197c8160e01b146123d25760405162461bcd60e51b8152600401610ade9061348f565b60007f000000000000000000000000000000000000000000000000000000000000000046141561283257507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041141561290d5760208301516040840151606085015160001a61290187828585612b47565b9450945050505061293f565b825160401415612937576020830151604084015161292c868383612c34565b93509350505061293f565b506000905060025b9250929050565b600081600481111561296857634e487b7160e01b600052602160045260246000fd5b14156129715750565b600181600481111561299357634e487b7160e01b600052602160045260246000fd5b14156129e15760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610ade565b6002816004811115612a0357634e487b7160e01b600052602160045260246000fd5b1415612a515760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610ade565b6003816004811115612a7357634e487b7160e01b600052602160045260246000fd5b1415612acc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610ade565b6004816004811115612aee57634e487b7160e01b600052602160045260246000fd5b14156115d85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610ade565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b7e5750600090506003612c2b565b8460ff16601b14158015612b9657508460ff16601c14155b15612ba75750600090506004612c2b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612bfb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612c2457600060019250925050612c2b565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01612c5587828885612b47565b935093505050935093915050565b828054612c6f90613637565b90600052602060002090601f016020900481019282612c915760008555612cd7565b82601f10612caa57805160ff1916838001178555612cd7565b82800160010185558215612cd7579182015b82811115612cd7578251825591602001919060010190612cbc565b506114609291505b808211156114605760008155600101612cdf565b600067ffffffffffffffff831115612d0d57612d0d6136fa565b604051612d24601f8501601f191660200182613672565b809150838152848484011115612d3957600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612d6857600080fd5b919050565b600082601f830112612d7d578081fd5b81356020612d8a826135b1565b604051612d978282613672565b8381528281019150858301600585901b87018401881015612db6578586fd5b855b85811015612dd457813584529284019290840190600101612db8565b5090979650505050505050565b80358015158114612d6857600080fd5b600082601f830112612e01578081fd5b611eee83833560208501612cf3565b600060208284031215612e21578081fd5b611eee82612d51565b60008060408385031215612e3c578081fd5b612e4583612d51565b9150612e5360208401612d51565b90509250929050565b600080600080600060a08688031215612e73578081fd5b612e7c86612d51565b9450612e8a60208701612d51565b9350604086013567ffffffffffffffff80821115612ea6578283fd5b612eb289838a01612d6d565b94506060880135915080821115612ec7578283fd5b612ed389838a01612d6d565b93506080880135915080821115612ee8578283fd5b50612ef588828901612df1565b9150509295509295909350565b600080600080600060a08688031215612f19578081fd5b612f2286612d51565b9450612f3060208701612d51565b93506040860135925060608601359150608086013567ffffffffffffffff811115612f59578182fd5b612ef588828901612df1565b60008060408385031215612f77578182fd5b612f8083612d51565b9150612e5360208401612de1565b60008060408385031215612fa0578182fd5b612fa983612d51565b946020939093013593505050565b600080600060608486031215612fcb578283fd5b612fd484612d51565b95602085013595506040909401359392505050565b60008060408385031215612ffb578182fd5b823567ffffffffffffffff80821115613012578384fd5b818501915085601f830112613025578384fd5b81356020613032826135b1565b60405161303f8282613672565b8381528281019150858301600585901b870184018b101561305e578889fd5b8896505b848710156130875761307381612d51565b835260019690960195918301918301613062565b509650508601359250508082111561309d578283fd5b506130aa85828601612d6d565b9150509250929050565b6000602082840312156130c5578081fd5b611eee82612de1565b600080600080600060a086880312156130e5578283fd5b6130ee86612de1565b94506130fc60208701612de1565b935061310a60408701612de1565b925061311860608701612de1565b949793965091946080013592915050565b60006020828403121561313a578081fd5b8135611eee816137b1565b600060208284031215613156578081fd5b8151611eee816137b1565b600060208284031215613172578081fd5b813567ffffffffffffffff811115613188578182fd5b8201601f81018413613198578182fd5b6131a784823560208401612cf3565b949350505050565b6000602082840312156131c0578081fd5b5035919050565b600080604083850312156131d9578182fd5b82359150602083013567ffffffffffffffff8111156131f6578182fd5b6130aa85828601612df1565b60008060408385031215613214578182fd5b50508035926020909101359150565b600080600060608486031215613237578081fd5b8335925060208401359150604084013567ffffffffffffffff81111561325b578182fd5b61326786828701612df1565b9150509250925092565b600080600080600060a08688031215613288578283fd5b505083359560208501359550604085013594606081013594506080013592509050565b60008060008060008060c087890312156132c3578384fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000815180845260208085019450808401835b8381101561331c57815187529582019590820190600101613300565b509495945050505050565b60008151808452815b8181101561334c57602081850181015186830182015201613330565b8181111561335d5782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a06040820181905260009061339e908301866132ed565b82810360608401526133b081866132ed565b905082810360808401526133c48185613327565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061340a90830184613327565b979650505050505050565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b602081526000611eee60208301846132ed565b60408152600061346160408301856132ed565b828103602084015261347381856132ed565b95945050505050565b602081526000611eee6020830184613327565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f45746865722076616c75652073656e74206973206e6f7420657175616c20746f60408201526a103a343290383934b1b29760a91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600067ffffffffffffffff8211156135cb576135cb6136fa565b5060051b60200190565b600082198211156135e8576135e86136ce565b500190565b6000826135fc576135fc6136e4565b500490565b600081600019048311821515161561361b5761361b6136ce565b500290565b600082821015613632576136326136ce565b500390565b600181811c9082168061364b57607f821691505b6020821081141561366c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715613698576136986136fa565b6040525050565b60006000198214156136b3576136b36136ce565b5060010190565b6000826136c9576136c96136e4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561146257600481823e5160e01c90565b600060443d10156137355790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561376557505050505090565b828501915081518181111561377d5750505050505090565b843d87010160208285010111156137975750505050505090565b6137a660208286010187613672565b509095945050505050565b6001600160e01b0319811681146115d857600080fdfea2646970667358221220e11002d8fc6534961d352dcb1f60dc2ac91735ee03bcc7b6beb68aab671bb9f864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 31,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 33,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2653,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2656,
        "contract": "contracts/Unname.sol:Unname",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2659,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_NORMAL_TOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2662,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_SPECIAL_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2665,
        "contract": "contracts/Unname.sol:Unname",
        "label": "SPECIAL_CARD_CONDITION",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2668,
        "contract": "contracts/Unname.sol:Unname",
        "label": "MAX_ADDRESS_TOKEN",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2671,
        "contract": "contracts/Unname.sol:Unname",
        "label": "PRICE",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2674,
        "contract": "contracts/Unname.sol:Unname",
        "label": "saleTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2677,
        "contract": "contracts/Unname.sol:Unname",
        "label": "normalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2680,
        "contract": "contracts/Unname.sol:Unname",
        "label": "specialSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2683,
        "contract": "contracts/Unname.sol:Unname",
        "label": "claimStageLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2686,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStageLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2689,
        "contract": "contracts/Unname.sol:Unname",
        "label": "specialCardId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2692,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasSaleStarted",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2695,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasClaimStarted",
        "offset": 1,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2698,
        "contract": "contracts/Unname.sol:Unname",
        "label": "hasAuctionStarted",
        "offset": 2,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2701,
        "contract": "contracts/Unname.sol:Unname",
        "label": "whitelistSwitch",
        "offset": 3,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2704,
        "contract": "contracts/Unname.sol:Unname",
        "label": "burnStarted",
        "offset": 4,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2707,
        "contract": "contracts/Unname.sol:Unname",
        "label": "owner",
        "offset": 5,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 2710,
        "contract": "contracts/Unname.sol:Unname",
        "label": "treasury",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2713,
        "contract": "contracts/Unname.sol:Unname",
        "label": "signer",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 2715,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStartTimestamp",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2717,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionTimeStep",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2719,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStartPrice",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2721,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionEndPrice",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2723,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionPriceStep",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2725,
        "contract": "contracts/Unname.sol:Unname",
        "label": "auctionStepNumber",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2729,
        "contract": "contracts/Unname.sol:Unname",
        "label": "quantityLimit",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2733,
        "contract": "contracts/Unname.sol:Unname",
        "label": "idHasMinted",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2737,
        "contract": "contracts/Unname.sol:Unname",
        "label": "addressHasMinted",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2741,
        "contract": "contracts/Unname.sol:Unname",
        "label": "addressHasClaimed",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}